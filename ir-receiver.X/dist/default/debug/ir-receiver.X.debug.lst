

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Mon Jan 06 00:41:31 2014

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	12F629
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	_osccallibrate_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text210,local,class=CODE,delta=2
    13                           	psect	text211,local,class=CODE,delta=2
    14                           	psect	text212,local,class=CODE,delta=2
    15                           	psect	text213,local,class=CODE,delta=2
    16                           	psect	text214,local,class=CODE,delta=2
    17                           	psect	text215,local,class=CODE,delta=2
    18                           	psect	text216,local,class=CODE,delta=2
    19                           	psect	text217,local,class=CODE,delta=2
    20                           	psect	text218,local,class=CODE,delta=2
    21                           	psect	text219,local,class=CODE,delta=2
    22                           	psect	text220,local,class=CODE,delta=2
    23                           	psect	pa_nodes,global,class=CODE,delta=2
    24                           	dabs	1,0x5E,2
    25  000A                     	;#
    26                           
    27                           	psect	config
    28  2007  31D4               	dw	12756	;#
    29  03FF                     _osccallibrate_absaddr	set	1023
    30  03FF                     _osccallibrate_absaddr	set	1023
    31                           
    32                           	psect	strings
    33  0000                     __pstrings:	
    34                           
    35                           	psect	_osccallibrate_text
    36  03FF                     __p_osccallibrate_text:	
    37  03FF                     _osccallibrate:	
    38  03FF  3430               	retlw	48
    39  0019                     _CMCON	set	25
    40  0005                     _GPIO	set	5
    41  0028                     _GPIO0	set	40
    42  0029                     _GPIO1	set	41
    43  002A                     _GPIO2	set	42
    44  002B                     _GPIO3	set	43
    45  002C                     _GPIO4	set	44
    46  002D                     _GPIO5	set	45
    47  0085                     _TRISIO	set	133
    48                           
    49                           	psect	cinit
    50  025B                     start_initialization:	
    51                           
    52                           ; Clear objects allocated to BANK0
    53  025B  01B1               	clrf	__pbssBANK0& (0+127)
    54  025C                     end_of_initialization:	
    55                           ;End of C runtime variable initialization code
    56                           
    57  025C  0183               	clrf	3
    58  025D  2B47               	ljmp	_main	;jump to C main() function
    59                           
    60                           	psect	bssBANK0
    61  0031                     __pbssBANK0:	
    62  0031                     _error:	
    63  0031                     	ds	1
    64                           
    65                           	psect	cstackCOMMON
    66  0000                     __pcstackCOMMON:	
    67  0000                     ??_printInt:	
    68  0000                     ??_configure:	
    69                           ; 0 bytes @ 0x0
    70                           
    71  0000                     ??_readIrSensor:	
    72                           ; 0 bytes @ 0x0
    73                           
    74  0000                     ??_readMark:	
    75                           ; 0 bytes @ 0x0
    76                           
    77  0000                     ??_readData:	
    78                           ; 0 bytes @ 0x0
    79                           
    80  0000                     ??_getIrData:	
    81                           ; 0 bytes @ 0x0
    82                           
    83  0000                     ??_toHex:	
    84                           ; 0 bytes @ 0x0
    85                           
    86  0000                     ??___lwdiv:	
    87                           ; 0 bytes @ 0x0
    88                           
    89  0000                     ??___lwmod:	
    90                           ; 0 bytes @ 0x0
    91                           
    92                           
    93                           	psect	cstackBANK0
    94  0020                     __pcstackBANK0:	
    95                           ; 0 bytes @ 0x0
    96                           
    97  0020                     ?_putch:	
    98  0020                     ??_putch:	
    99                           ; 0 bytes @ 0x0
   100                           
   101  0020                     ?_configure:	
   102                           ; 0 bytes @ 0x0
   103                           
   104  0020                     ?_main:	
   105                           ; 0 bytes @ 0x0
   106                           
   107  0020                     ?_readIrSensor:	
   108                           ; 0 bytes @ 0x0
   109                           
   110  0020                     ?_readMark:	
   111                           ; 1 bytes @ 0x0
   112                           
   113  0020                     ?_getIrData:	
   114                           ; 1 bytes @ 0x0
   115                           
   116  0020                     ?_toHex:	
   117                           ; 1 bytes @ 0x0
   118                           
   119  0020                     ?___lwdiv:	
   120                           ; 1 bytes @ 0x0
   121                           
   122  0020                     ?___lwmod:	
   123                           ; 2 bytes @ 0x0
   124                           
   125  0020                     readIrSensor@l:	
   126                           ; 2 bytes @ 0x0
   127                           
   128  0020                     toHex@v:	
   129                           ; 1 bytes @ 0x0
   130                           
   131  0020                     ___lwdiv@divisor:	
   132                           ; 1 bytes @ 0x0
   133                           
   134  0020                     ___lwmod@divisor:	
   135                           ; 2 bytes @ 0x0
   136                           
   137                           
   138                           ; 2 bytes @ 0x0
   139  0020                     	ds	1
   140  0021                     putch@ch:	
   141  0021                     readIrSensor@port:	
   142                           ; 1 bytes @ 0x1
   143                           
   144                           
   145                           ; 1 bytes @ 0x1
   146  0021                     	ds	1
   147  0022                     ?_readData:	
   148  0022                     putch@bit_count:	
   149                           ; 1 bytes @ 0x2
   150                           
   151  0022                     readMark@count:	
   152                           ; 1 bytes @ 0x2
   153                           
   154  0022                     readData@size:	
   155                           ; 1 bytes @ 0x2
   156                           
   157  0022                     ___lwdiv@dividend:	
   158                           ; 1 bytes @ 0x2
   159                           
   160  0022                     ___lwmod@dividend:	
   161                           ; 2 bytes @ 0x2
   162                           
   163                           
   164                           ; 2 bytes @ 0x2
   165  0022                     	ds	1
   166  0023                     readData@irdata:	
   167                           
   168                           ; 1 bytes @ 0x3
   169  0023                     	ds	1
   170  0024                     readData@byte_count:	
   171  0024                     ___lwmod@counter:	
   172                           ; 1 bytes @ 0x4
   173                           
   174  0024                     ___lwdiv@quotient:	
   175                           ; 1 bytes @ 0x4
   176                           
   177                           
   178                           ; 2 bytes @ 0x4
   179  0024                     	ds	1
   180  0025                     readData@value:	
   181                           
   182                           ; 1 bytes @ 0x5
   183  0025                     	ds	1
   184  0026                     readData@mask:	
   185  0026                     ___lwdiv@counter:	
   186                           ; 1 bytes @ 0x6
   187                           
   188                           
   189                           ; 1 bytes @ 0x6
   190  0026                     	ds	1
   191  0027                     ?_printInt:	
   192  0027                     readData@count:	
   193                           ; 0 bytes @ 0x7
   194                           
   195  0027                     printInt@data:	
   196                           ; 1 bytes @ 0x7
   197                           
   198                           
   199                           ; 2 bytes @ 0x7
   200  0027                     	ds	1
   201  0028                     getIrData@irdata:	
   202                           
   203                           ; 5 bytes @ 0x8
   204  0028                     	ds	1
   205  0029                     printInt@val:	
   206                           
   207                           ; 1 bytes @ 0x9
   208  0029                     	ds	1
   209  002A                     printInt@div:	
   210                           
   211                           ; 2 bytes @ 0xA
   212  002A                     	ds	3
   213  002D                     ??_main:	
   214                           
   215                           ; 0 bytes @ 0xD
   216  002D                     	ds	3
   217  0030                     main@data:	
   218                           
   219                           ; 1 bytes @ 0x10
   220  0030                     	ds	1
   221                           
   222                           	psect	maintext
   223  0347                     __pmaintext:	
   224 ;;Data sizes: Strings 0, constant 0, data 0, bss 1, persistent 0 stack 0
   225 ;;Auto spaces:   Size  Autos    Used
   226 ;; COMMON           0      0       0
   227 ;; BANK0           62     17      18
   228 ;;
   229 ;; Pointer list with targets:
   230 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
   231 ;;
   232 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
   233 ;;
   234 ;; readData@irdata	PTR unsigned char  size(1) Largest target is 5
   235 ;;		 -> getIrData@irdata(BANK0[5]), 
   236 ;;
   237 ;;
   238 ;; Critical Paths under _main in COMMON
   239 ;;
   240 ;;   None.
   241 ;;
   242 ;; Critical Paths under _main in BANK0
   243 ;;
   244 ;;   _main->_getIrData
   245 ;;   _getIrData->_readData
   246 ;;   _printInt->___lwdiv
   247 ;;   _readData->_readIrSensor
   248 ;;   _readMark->_readIrSensor
   249 ;;
   250 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   251 ;;
   252 ;;
   253 ;;Call Graph Tables:
   254 ;;
   255 ;; ---------------------------------------------------------------------------------
   256 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   257 ;; ---------------------------------------------------------------------------------
   258 ;; (0) _main                                                 4     4      0    1497
   259 ;;                                             13 BANK0      4     4      0
   260 ;;                          _configure
   261 ;;                              _putch
   262 ;;                          _getIrData
   263 ;;                              _toHex
   264 ;;                           _printInt
   265 ;; ---------------------------------------------------------------------------------
   266 ;; (1) _getIrData                                            6     6      0     788
   267 ;;                                              8 BANK0      5     5      0
   268 ;;                       _readIrSensor
   269 ;;                           _readMark
   270 ;;                           _readData
   271 ;; ---------------------------------------------------------------------------------
   272 ;; (1) _printInt                                             5     3      2     571
   273 ;;                                              7 BANK0      5     3      2
   274 ;;                            ___lwdiv
   275 ;;                              _putch
   276 ;;                            ___lwmod
   277 ;; ---------------------------------------------------------------------------------
   278 ;; (2) _readData                                             6     5      1     395
   279 ;;                                              2 BANK0      6     5      1
   280 ;;                       _readIrSensor
   281 ;; ---------------------------------------------------------------------------------
   282 ;; (2) _readMark                                             1     1      0     162
   283 ;;                                              2 BANK0      1     1      0
   284 ;;                       _readIrSensor
   285 ;; ---------------------------------------------------------------------------------
   286 ;; (2) _putch                                                3     3      0      47
   287 ;;                                              0 BANK0      3     3      0
   288 ;; ---------------------------------------------------------------------------------
   289 ;; (2) ___lwmod                                              5     1      4     159
   290 ;;                                              0 BANK0      5     1      4
   291 ;; ---------------------------------------------------------------------------------
   292 ;; (2) ___lwdiv                                              7     3      4     162
   293 ;;                                              0 BANK0      7     3      4
   294 ;; ---------------------------------------------------------------------------------
   295 ;; (1) _toHex                                                1     1      0      46
   296 ;;                                              0 BANK0      1     1      0
   297 ;; ---------------------------------------------------------------------------------
   298 ;; (3) _readIrSensor                                         2     2      0      70
   299 ;;                                              0 BANK0      2     2      0
   300 ;; ---------------------------------------------------------------------------------
   301 ;; (1) _configure                                            0     0      0       0
   302 ;; ---------------------------------------------------------------------------------
   303 ;; Estimated maximum stack depth 3
   304 ;; ---------------------------------------------------------------------------------
   305 ;; Call Graph Graphs:
   306 ;; _main (ROOT)
   307 ;;   _configure
   308 ;;   _putch
   309 ;;   _getIrData
   310 ;;     _readIrSensor
   311 ;;     _readMark
   312 ;;       _readIrSensor
   313 ;;     _readData
   314 ;;       _readIrSensor
   315 ;;   _toHex
   316 ;;   _printInt
   317 ;;     ___lwdiv
   318 ;;     _putch
   319 ;;     ___lwmod
   320 ;;
   321 ;; Address spaces:
   322 ;;Name               Size   Autos  Total    Cost      Usage
   323 ;;BITCOMMON            0      0       0       0        0.0%
   324 ;;EEDATA              80      0       0       0        0.0%
   325 ;;NULL                 0      0       0       0        0.0%
   326 ;;CODE                 0      0       0       0        0.0%
   327 ;;BITSFR0              0      0       0       1        0.0%
   328 ;;SFR0                 0      0       0       1        0.0%
   329 ;;COMMON               0      0       0       1        0.0%
   330 ;;BITSFR1              0      0       0       2        0.0%
   331 ;;SFR1                 0      0       0       2        0.0%
   332 ;;STACK                0      0       3       2        0.0%
   333 ;;BITBANK0            3E      0       0       3        0.0%
   334 ;;BANK0               3E     11      12       4       29.0%
   335 ;;ABS                  0      0      12       5        0.0%
   336 ;;DATA                 0      0      15       6        0.0%
   337                           
   338                           
   339 ;; *************** function _main *****************
   340 ;; Defined at:
   341 ;;		line 369 in file "main.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;  data            1   16[BANK0 ] unsigned char 
   346 ;; Return value:  Size  Location     Type
   347 ;;		None               void
   348 ;; Registers used:
   349 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   350 ;; Tracked objects:
   351 ;;		On entry : 17F/0
   352 ;;		On exit  : 20/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMMON   BANK0
   355 ;;      Params:         0       0
   356 ;;      Locals:         0       1
   357 ;;      Temps:          0       3
   358 ;;      Totals:         0       4
   359 ;;Total ram usage:        4 bytes
   360 ;; Hardware stack levels required when called:    3
   361 ;; This function calls:
   362 ;;		_configure
   363 ;;		_putch
   364 ;;		_getIrData
   365 ;;		_toHex
   366 ;;		_printInt
   367 ;; This function is called by:
   368 ;;		Startup code after reset
   369 ;; This function uses a non-reentrant model
   370 ;;
   371  0347                     _main:	
   372                           
   373                           ;main.c: 370: configure();
   374                           
   375                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   376  0347  2269               	fcall	_configure
   377  0348  2B59               	goto	l388
   378  0349                     l1626:	
   379                           
   380                           ;main.c: 378: {
   381                           ;main.c: 379: putch('I');
   382  0349  3049               	movlw	73
   383  034A  22AC               	fcall	_putch
   384                           
   385                           ;main.c: 380: putch('R');
   386  034B  3052               	movlw	82
   387  034C  22AC               	fcall	_putch
   388                           
   389                           ;main.c: 381: putch(':');
   390  034D  303A               	movlw	58
   391  034E  22AC               	fcall	_putch
   392                           
   393                           ;main.c: 382: putch(toHex((data >> 4) & 0xf));
   394  034F  1283               	bcf	3,5	;RP0=0, select bank0
   395  0350  0E30               	swapf	main@data,w
   396  0351  390F               	andlw	15
   397  0352  225E               	fcall	_toHex
   398  0353  22AC               	fcall	_putch
   399                           
   400                           ;main.c: 383: putch(toHex(data & 0xf));
   401  0354  1283               	bcf	3,5	;RP0=0, select bank0
   402  0355  0830               	movf	main@data,w
   403  0356  390F               	andlw	15
   404  0357  225E               	fcall	_toHex
   405  0358  22AC               	fcall	_putch
   406  0359                     l388:	
   407                           ;main.c: 371: while(1)
   408                           
   409                           ;main.c: 384: }
   410                           
   411                           
   412                           ;main.c: 372: {
   413                           ;main.c: 373: putch('\r');
   414  0359  300D               	movlw	13
   415  035A  22AC               	fcall	_putch
   416                           
   417                           ;main.c: 374: putch('\n');
   418  035B  300A               	movlw	10
   419  035C  22AC               	fcall	_putch
   420                           
   421                           ;main.c: 375: _delay((unsigned long)((500)*(4000000/4000.0)));
   422  035D  3003               	movlw	3
   423  035E  1283               	bcf	3,5	;RP0=0, select bank0
   424  035F  00AF               	movwf	??_main+2
   425  0360  308A               	movlw	138
   426  0361  00AE               	movwf	??_main+1
   427  0362  3056               	movlw	86
   428  0363  00AD               	movwf	??_main
   429  0364                     u817:	
   430  0364  0BAD               	decfsz	??_main,f
   431  0365  2B64               	goto	u817
   432  0366  0BAE               	decfsz	??_main+1,f
   433  0367  2B64               	goto	u817
   434  0368  0BAF               	decfsz	??_main+2,f
   435  0369  2B64               	goto	u817
   436  036A  2B6B               	nop2
   437                           
   438                           ;main.c: 376: unsigned char data = getIrData();
   439  036B  231D               	fcall	_getIrData
   440  036C  00B0               	movwf	main@data
   441                           
   442                           ;main.c: 377: if(!error)
   443  036D  08B1               	movf	_error,f
   444  036E  1903               	btfsc	3,2
   445  036F  2B49               	goto	l1626
   446                           
   447                           ;main.c: 385: else
   448                           ;main.c: 386: {
   449                           ;main.c: 387: putch('E');
   450  0370  3045               	movlw	69
   451  0371  22AC               	fcall	_putch
   452                           
   453                           ;main.c: 388: putch(':');
   454  0372  303A               	movlw	58
   455  0373  22AC               	fcall	_putch
   456                           
   457                           ;main.c: 389: printInt(error);
   458  0374  1283               	bcf	3,5	;RP0=0, select bank0
   459  0375  0831               	movf	_error,w
   460  0376  00A7               	movwf	?_printInt
   461  0377  01A8               	clrf	?_printInt+1
   462  0378  237A               	fcall	_printInt
   463  0379  2B59               	goto	l388
   464  037A                     __end_of_main:	
   465                           
   466                           	psect	text210
   467  031D                     __ptext210:	
   468 ;; =============== function _main ends ============
   469                           
   470                           
   471 ;; *************** function _getIrData *****************
   472 ;; Defined at:
   473 ;;		line 327 in file "main.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  irdata          5    8[BANK0 ] unsigned char [5]
   478 ;;  count           1    0        unsigned char 
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      unsigned char 
   481 ;; Registers used:
   482 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 20/0
   486 ;;		Unchanged: FFEDF/0
   487 ;; Data sizes:     COMMON   BANK0
   488 ;;      Params:         0       0
   489 ;;      Locals:         0       5
   490 ;;      Temps:          0       0
   491 ;;      Totals:         0       5
   492 ;;Total ram usage:        5 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    2
   495 ;; This function calls:
   496 ;;		_readIrSensor
   497 ;;		_readMark
   498 ;;		_readData
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503  031D                     _getIrData:	
   504  031D                     l1588:	
   505                           ;main.c: 329: while(readIrSensor() == 0)
   506                           
   507                           ; Regs used in _getIrData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   508                           
   509  031D  2275               	fcall	_readIrSensor
   510  031E  3A00               	xorlw	0
   511  031F  1903               	skipnz
   512  0320  2B1D               	goto	l1588
   513                           
   514                           ;main.c: 332: GPIO4 = 1;
   515  0321  1605               	bsf	5,4
   516  0322                     l1590:	
   517                           ;main.c: 333: while(!readIrSensor()){}
   518                           
   519  0322  2275               	fcall	_readIrSensor
   520  0323  3A00               	xorlw	0
   521  0324  1903               	skipnz
   522  0325  2B22               	goto	l1590
   523                           
   524                           ;main.c: 334: GPIO4 = 0;
   525  0326  1205               	bcf	5,4
   526                           
   527                           ;main.c: 336: unsigned char irdata[5];
   528                           ;main.c: 337: error = readMark();
   529  0327  228D               	fcall	_readMark
   530  0328  00B1               	movwf	_error
   531                           
   532                           ;main.c: 338: if(!error)
   533  0329  08B1               	movf	_error,f
   534  032A  1D03               	skipz
   535  032B  3400               	retlw	0
   536                           
   537                           ;main.c: 339: {
   538                           ;main.c: 340: error = readData(irdata, sizeof(irdata));
   539  032C  3005               	movlw	5
   540  032D  00A2               	movwf	?_readData
   541  032E  3028               	movlw	getIrData@irdata& (0+255)
   542  032F  23B4               	fcall	_readData
   543  0330  00B1               	movwf	_error
   544                           
   545                           ;main.c: 341: if(!error)
   546  0331  08B1               	movf	_error,f
   547  0332  1D03               	skipz
   548  0333  3400               	retlw	0
   549                           
   550                           ;main.c: 342: {
   551                           ;main.c: 343: if((irdata[0] == (unsigned char)~(irdata[1])) &&
   552                           ;main.c: 344: (irdata[0] == 0x82))
   553  0334  0929               	comf	getIrData@irdata+1,w
   554  0335  0628               	xorwf	getIrData@irdata,w
   555  0336  1D03               	skipz
   556  0337  2B44               	goto	l1614
   557  0338  0828               	movf	getIrData@irdata,w
   558  0339  3A82               	xorlw	130
   559  033A  1D03               	skipz
   560  033B  2B44               	goto	l1614
   561                           
   562                           ;main.c: 345: {
   563                           ;main.c: 346: if(irdata[2] == (unsigned char) ~(irdata[3]))
   564  033C  092B               	comf	getIrData@irdata+3,w
   565  033D  062A               	xorwf	getIrData@irdata+2,w
   566  033E  1D03               	skipz
   567  033F  2B42               	goto	l1612
   568                           
   569                           ;main.c: 347: {
   570                           ;main.c: 348: return irdata[2];
   571  0340  082A               	movf	getIrData@irdata+2,w
   572  0341  0008               	return
   573  0342                     l1612:	
   574                           
   575                           ;main.c: 350: else
   576                           ;main.c: 351: error = 7;
   577  0342  3007               	movlw	7
   578  0343  2B45               	goto	L1
   579  0344                     l1614:	
   580                           
   581                           ;main.c: 353: else
   582                           ;main.c: 354: error = 6;
   583  0344  3006               	movlw	6
   584  0345                     L1:	
   585  0345  00B1               	movwf	_error
   586                           
   587                           ;main.c: 355: }
   588                           ;main.c: 356: }
   589                           ;main.c: 357: return 0;
   590  0346  3400               	retlw	0
   591  0347                     __end_of_getIrData:	
   592                           
   593                           	psect	text211
   594  037A                     __ptext211:	
   595 ;; =============== function _getIrData ends ============
   596                           
   597                           
   598 ;; *************** function _printInt *****************
   599 ;; Defined at:
   600 ;;		line 164 in file "main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;  data            2    7[BANK0 ] unsigned int 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;  val             1    9[BANK0 ] unsigned char 
   605 ;;  div             2   10[BANK0 ] unsigned int 
   606 ;; Return value:  Size  Location     Type
   607 ;;		None               void
   608 ;; Registers used:
   609 ;;		wreg, status,2, status,0, pclath, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 20/0
   612 ;;		On exit  : 20/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMMON   BANK0
   615 ;;      Params:         0       2
   616 ;;      Locals:         0       3
   617 ;;      Temps:          0       0
   618 ;;      Totals:         0       5
   619 ;;Total ram usage:        5 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; Hardware stack levels required when called:    1
   622 ;; This function calls:
   623 ;;		___lwdiv
   624 ;;		_putch
   625 ;;		___lwmod
   626 ;; This function is called by:
   627 ;;		_main
   628 ;; This function uses a non-reentrant model
   629 ;;
   630  037A                     _printInt:	
   631                           
   632                           ;main.c: 165: unsigned int div = 1000;
   633                           
   634                           ; Regs used in _printInt: [wreg+status,2+status,0+pclath+cstack]
   635  037A  30E8               	movlw	232
   636  037B  00AA               	movwf	printInt@div
   637  037C  3003               	movlw	3
   638  037D  00AB               	movwf	printInt@div+1
   639  037E                     l1584:	
   640                           ;main.c: 166: while(div)
   641                           
   642  037E  082B               	movf	printInt@div+1,w
   643  037F  042A               	iorwf	printInt@div,w
   644  0380  1903               	btfsc	3,2
   645  0381  0008               	return
   646                           
   647                           ;main.c: 167: {
   648                           ;main.c: 168: unsigned char val = 0;
   649  0382  01A9               	clrf	printInt@val
   650                           
   651                           ;main.c: 169: if(data >= div)
   652  0383  082B               	movf	printInt@div+1,w
   653  0384  0228               	subwf	printInt@data+1,w
   654  0385  1D03               	skipz
   655  0386  2B89               	goto	u715
   656  0387  082A               	movf	printInt@div,w
   657  0388  0227               	subwf	printInt@data,w
   658  0389                     u715:	
   659  0389  1C03               	skipc
   660  038A  2B96               	goto	l315
   661                           
   662                           ;main.c: 170: val = data/div;
   663  038B  082B               	movf	printInt@div+1,w
   664  038C  00A1               	movwf	?___lwdiv+1
   665  038D  082A               	movf	printInt@div,w
   666  038E  00A0               	movwf	?___lwdiv
   667  038F  0828               	movf	printInt@data+1,w
   668  0390  00A3               	movwf	?___lwdiv+3
   669  0391  0827               	movf	printInt@data,w
   670  0392  00A2               	movwf	?___lwdiv+2
   671  0393  22F3               	fcall	___lwdiv
   672  0394  0820               	movf	?___lwdiv,w
   673  0395  00A9               	movwf	printInt@val
   674  0396                     l315:	
   675                           
   676                           ;main.c: 172: putch(val+0x30);
   677  0396  0829               	movf	printInt@val,w
   678  0397  3E30               	addlw	48
   679  0398  22AC               	fcall	_putch
   680                           
   681                           ;main.c: 173: data = data%div;
   682  0399  1283               	bcf	3,5	;RP0=0, select bank0
   683  039A  082B               	movf	printInt@div+1,w
   684  039B  00A1               	movwf	?___lwmod+1
   685  039C  082A               	movf	printInt@div,w
   686  039D  00A0               	movwf	?___lwmod
   687  039E  0828               	movf	printInt@data+1,w
   688  039F  00A3               	movwf	?___lwmod+3
   689  03A0  0827               	movf	printInt@data,w
   690  03A1  00A2               	movwf	?___lwmod+2
   691  03A2  22CF               	fcall	___lwmod
   692  03A3  0821               	movf	?___lwmod+1,w
   693  03A4  00A8               	movwf	printInt@data+1
   694  03A5  0820               	movf	?___lwmod,w
   695  03A6  00A7               	movwf	printInt@data
   696                           
   697                           ;main.c: 174: div = div/10;
   698  03A7  300A               	movlw	10
   699  03A8  00A0               	movwf	?___lwdiv
   700  03A9  01A1               	clrf	?___lwdiv+1
   701  03AA  082B               	movf	printInt@div+1,w
   702  03AB  00A3               	movwf	?___lwdiv+3
   703  03AC  082A               	movf	printInt@div,w
   704  03AD  00A2               	movwf	?___lwdiv+2
   705  03AE  22F3               	fcall	___lwdiv
   706  03AF  0821               	movf	?___lwdiv+1,w
   707  03B0  00AB               	movwf	printInt@div+1
   708  03B1  0820               	movf	?___lwdiv,w
   709  03B2  00AA               	movwf	printInt@div
   710  03B3  2B7E               	goto	l1584
   711  03B4                     __end_of_printInt:	
   712                           
   713                           	psect	text212
   714  03B4                     __ptext212:	
   715 ;; =============== function _printInt ends ============
   716                           
   717                           
   718 ;; *************** function _readData *****************
   719 ;; Defined at:
   720 ;;		line 272 in file "main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;  irdata          1    wreg     PTR unsigned char 
   723 ;;		 -> getIrData@irdata(5), 
   724 ;;  size            1    2[BANK0 ] unsigned char 
   725 ;; Auto vars:     Size  Location     Type
   726 ;;  irdata          1    3[BANK0 ] PTR unsigned char 
   727 ;;		 -> getIrData@irdata(5), 
   728 ;;  count           1    7[BANK0 ] unsigned char 
   729 ;;  mask            1    6[BANK0 ] unsigned char 
   730 ;;  value           1    5[BANK0 ] unsigned char 
   731 ;;  byte_count      1    4[BANK0 ] unsigned char 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      unsigned char 
   734 ;; Registers used:
   735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 20/0
   738 ;;		On exit  : 20/0
   739 ;;		Unchanged: FFEDF/0
   740 ;; Data sizes:     COMMON   BANK0
   741 ;;      Params:         0       1
   742 ;;      Locals:         0       5
   743 ;;      Temps:          0       0
   744 ;;      Totals:         0       6
   745 ;;Total ram usage:        6 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; Hardware stack levels required when called:    1
   748 ;; This function calls:
   749 ;;		_readIrSensor
   750 ;; This function is called by:
   751 ;;		_getIrData
   752 ;; This function uses a non-reentrant model
   753 ;;
   754  03B4                     _readData:	
   755                           
   756                           ; Regs used in _readData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   757                           ;readData@irdata stored from wreg
   758  03B4  00A3               	movwf	readData@irdata
   759                           
   760                           ;main.c: 274: unsigned char count = 0;
   761  03B5  01A7               	clrf	readData@count
   762                           
   763                           ;main.c: 275: unsigned char byte_count = 0;
   764  03B6  01A4               	clrf	readData@byte_count
   765                           
   766                           ;main.c: 276: unsigned char mask = 1;
   767  03B7  01A6               	clrf	readData@mask
   768  03B8  0AA6               	incf	readData@mask,f
   769                           
   770                           ;main.c: 277: value = 0;
   771  03B9  01A5               	clrf	readData@value
   772  03BA                     l345:	
   773                           ;main.c: 278: while(1)
   774                           
   775                           
   776                           ;main.c: 279: {
   777                           ;main.c: 280: count = 0;
   778  03BA  01A7               	clrf	readData@count
   779  03BB                     l1514:	
   780                           ;main.c: 281: while(readIrSensor() == 1)
   781                           
   782  03BB  2275               	fcall	_readIrSensor
   783  03BC  3A01               	xorlw	1
   784  03BD  1D03               	btfss	3,2
   785  03BE  2BC1               	goto	l1516
   786                           
   787                           ;main.c: 282: count++;
   788  03BF  0AA7               	incf	readData@count,f
   789  03C0  2BBB               	goto	l1514
   790  03C1                     l1516:	
   791                           
   792                           ;main.c: 283: if(count < 10 || count > 14)
   793  03C1  300A               	movlw	10
   794  03C2  0227               	subwf	readData@count,w
   795  03C3  1C03               	skipc
   796  03C4  3403               	retlw	3
   797  03C5  300F               	movlw	15
   798  03C6  0227               	subwf	readData@count,w
   799  03C7  1803               	btfsc	3,0
   800                           
   801                           ;main.c: 284: return 3;
   802  03C8  3403               	retlw	3
   803                           
   804                           ;main.c: 286: count = 0;
   805  03C9  01A7               	clrf	readData@count
   806  03CA                     l1528:	
   807                           ;main.c: 287: while(readIrSensor() == 0)
   808                           
   809  03CA  2275               	fcall	_readIrSensor
   810  03CB  3A00               	xorlw	0
   811  03CC  1D03               	btfss	3,2
   812  03CD  2BD0               	goto	l1530
   813                           
   814                           ;main.c: 288: count++;
   815  03CE  0AA7               	incf	readData@count,f
   816  03CF  2BCA               	goto	l1528
   817  03D0                     l1530:	
   818                           
   819                           ;main.c: 291: if((count >=10 ) && ( count <=14) )
   820  03D0  300A               	movlw	10
   821  03D1  0227               	subwf	readData@count,w
   822  03D2  1C03               	skipc
   823  03D3  2BDB               	goto	l1536
   824  03D4  300F               	movlw	15
   825  03D5  0227               	subwf	readData@count,w
   826  03D6  1803               	skipnc
   827  03D7  2BDB               	goto	l1536
   828                           
   829                           ;main.c: 292: value &= ~mask;
   830  03D8  0926               	comf	readData@mask,w
   831  03D9  05A5               	andwf	readData@value,f
   832  03DA  2BE1               	goto	l1544
   833  03DB                     l1536:	
   834                           
   835                           ;main.c: 293: else if(count > 33)
   836  03DB  3022               	movlw	34
   837  03DC  0227               	subwf	readData@count,w
   838  03DD  1C03               	skipc
   839  03DE  3404               	retlw	4
   840                           
   841                           ;main.c: 294: value |= mask;
   842  03DF  0826               	movf	readData@mask,w
   843  03E0  04A5               	iorwf	readData@value,f
   844  03E1                     l1544:	
   845                           ;main.c: 295: else
   846                           ;main.c: 296: return 4;
   847                           
   848                           
   849                           ;main.c: 298: if(count > 200 )
   850  03E1  30C9               	movlw	201
   851  03E2  0227               	subwf	readData@count,w
   852  03E3  1C03               	skipc
   853  03E4  2BE9               	goto	l1556
   854                           
   855                           ;main.c: 299: {
   856                           ;main.c: 300: if(mask == 1)
   857  03E5  0B26               	decfsz	readData@mask,w
   858  03E6  3405               	retlw	5
   859                           
   860                           ;main.c: 301: {
   861                           ;main.c: 302: byte_count--;
   862  03E7  03A4               	decf	readData@byte_count,f
   863                           
   864                           ;main.c: 303: break;
   865  03E8  3400               	retlw	0
   866  03E9                     l1556:	
   867                           ;main.c: 305: else
   868                           ;main.c: 306: return 5;
   869                           
   870                           
   871                           ;main.c: 307: }
   872                           ;main.c: 309: if(mask == 0x80)
   873  03E9  0826               	movf	readData@mask,w
   874  03EA  3A80               	xorlw	128
   875  03EB  1D03               	skipz
   876  03EC  2BFC               	goto	l364
   877                           
   878                           ;main.c: 310: {
   879                           ;main.c: 311: mask = 1;
   880  03ED  01A6               	clrf	readData@mask
   881  03EE  0AA6               	incf	readData@mask,f
   882                           
   883                           ;main.c: 312: byte_count++;
   884  03EF  0AA4               	incf	readData@byte_count,f
   885                           
   886                           ;main.c: 313: *irdata = value;
   887  03F0  0823               	movf	readData@irdata,w
   888  03F1  0084               	movwf	4
   889  03F2  0825               	movf	readData@value,w
   890  03F3  1383               	bcf	3,7	;select IRP bank0
   891  03F4  0080               	movwf	0
   892                           
   893                           ;main.c: 314: irdata++;
   894  03F5  0AA3               	incf	readData@irdata,f
   895                           
   896                           ;main.c: 315: value = 0;
   897  03F6  01A5               	clrf	readData@value
   898                           
   899                           ;main.c: 316: if(byte_count > size)
   900  03F7  0824               	movf	readData@byte_count,w
   901  03F8  0222               	subwf	readData@size,w
   902  03F9  1C03               	btfss	3,0
   903  03FA  3400               	retlw	0
   904  03FB  2BBA               	goto	l345
   905  03FC                     l364:	
   906                           
   907                           ;main.c: 319: }
   908                           ;main.c: 321: mask = mask << 1;
   909  03FC  1003               	clrc
   910  03FD  0DA6               	rlf	readData@mask,f
   911  03FE  2BBA               	goto	l345
   912  03FF                     __end_of_readData:	
   913                           ;main.c: 322: }
   914                           ;main.c: 323: return 0;
   915                           
   916                           
   917                           	psect	text213
   918  028D                     __ptext213:	
   919 ;; =============== function _readData ends ============
   920                           
   921                           
   922 ;; *************** function _readMark *****************
   923 ;; Defined at:
   924 ;;		line 246 in file "main.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  count           1    2[BANK0 ] unsigned char 
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      unsigned char 
   931 ;; Registers used:
   932 ;;		wreg, status,2, status,0, pclath, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 20/0
   935 ;;		On exit  : 20/0
   936 ;;		Unchanged: FFFDF/0
   937 ;; Data sizes:     COMMON   BANK0
   938 ;;      Params:         0       0
   939 ;;      Locals:         0       1
   940 ;;      Temps:          0       0
   941 ;;      Totals:         0       1
   942 ;;Total ram usage:        1 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    1
   945 ;; This function calls:
   946 ;;		_readIrSensor
   947 ;; This function is called by:
   948 ;;		_getIrData
   949 ;; This function uses a non-reentrant model
   950 ;;
   951  028D                     _readMark:	
   952                           
   953                           ;main.c: 248: unsigned char count = 0;
   954                           
   955                           ; Regs used in _readMark: [wreg+status,2+status,0+pclath+cstack]
   956  028D  01A2               	clrf	readMark@count
   957  028E                     l1480:	
   958                           ;main.c: 249: while(readIrSensor() == 1)
   959                           
   960  028E  2275               	fcall	_readIrSensor
   961  028F  3A01               	xorlw	1
   962  0290  1D03               	btfss	3,2
   963  0291  2A94               	goto	l1482
   964                           
   965                           ;main.c: 250: count++;
   966  0292  0AA2               	incf	readMark@count,f
   967  0293  2A8E               	goto	l1480
   968  0294                     l1482:	
   969                           
   970                           ;main.c: 252: if(count < 190 || count > 220)
   971  0294  30BE               	movlw	190
   972  0295  0222               	subwf	readMark@count,w
   973  0296  1C03               	skipc
   974  0297  3401               	retlw	1
   975  0298  30DD               	movlw	221
   976  0299  0222               	subwf	readMark@count,w
   977  029A  1803               	btfsc	3,0
   978                           
   979                           ;main.c: 253: {
   980                           ;main.c: 255: return 1;
   981  029B  3401               	retlw	1
   982                           
   983                           ;main.c: 256: }
   984                           ;main.c: 258: count = 0;
   985  029C  01A2               	clrf	readMark@count
   986  029D                     l1494:	
   987                           ;main.c: 260: while(readIrSensor() == 0)
   988                           
   989  029D  2275               	fcall	_readIrSensor
   990  029E  3A00               	xorlw	0
   991  029F  1D03               	btfss	3,2
   992  02A0  2AA3               	goto	l1496
   993                           
   994                           ;main.c: 261: count++;
   995  02A1  0AA2               	incf	readMark@count,f
   996  02A2  2A9D               	goto	l1494
   997  02A3                     l1496:	
   998                           
   999                           ;main.c: 263: if(count < 90 || count > 115)
  1000  02A3  305A               	movlw	90
  1001  02A4  0222               	subwf	readMark@count,w
  1002  02A5  1C03               	skipc
  1003  02A6  3402               	retlw	2
  1004  02A7  3074               	movlw	116
  1005  02A8  0222               	subwf	readMark@count,w
  1006  02A9  1803               	btfsc	3,0
  1007                           
  1008                           ;main.c: 264: {
  1009                           ;main.c: 266: return 2;
  1010  02AA  3402               	retlw	2
  1011                           
  1012                           ;main.c: 267: }
  1013                           ;main.c: 268: return 0;
  1014  02AB  3400               	retlw	0
  1015  02AC                     __end_of_readMark:	
  1016                           
  1017                           	psect	text214
  1018  02AC                     __ptext214:	
  1019 ;; =============== function _readMark ends ============
  1020                           
  1021                           
  1022 ;; *************** function _putch *****************
  1023 ;; Defined at:
  1024 ;;		line 145 in file "main.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;  ch              1    wreg     unsigned char 
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  ch              1    1[BANK0 ] unsigned char 
  1029 ;;  bit_count       1    2[BANK0 ] unsigned char 
  1030 ;; Return value:  Size  Location     Type
  1031 ;;		None               void
  1032 ;; Registers used:
  1033 ;;		wreg, status,2, status,0
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMMON   BANK0
  1039 ;;      Params:         0       0
  1040 ;;      Locals:         0       2
  1041 ;;      Temps:          0       1
  1042 ;;      Totals:         0       3
  1043 ;;Total ram usage:        3 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; This function calls:
  1046 ;;		Nothing
  1047 ;; This function is called by:
  1048 ;;		_printInt
  1049 ;;		_main
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052  02AC                     _putch:	
  1053                           
  1054                           ; Regs used in _putch: [wreg+status,2+status,0]
  1055                           ;putch@ch stored from wreg
  1056  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1057  02AD  00A1               	movwf	putch@ch
  1058                           
  1059                           ;main.c: 146: unsigned char bit_count = 8;
  1060  02AE  3008               	movlw	8
  1061  02AF  00A2               	movwf	putch@bit_count
  1062  02B0  3020               	movlw	32
  1063                           
  1064                           ;main.c: 147: GPIO2 = 0;
  1065  02B1  1105               	bcf	5,2
  1066                           
  1067                           ;main.c: 148: _delay((unsigned long)((98)*(4000000/4000000.0)));
  1068  02B2  00A0               	movwf	??_putch
  1069  02B3                     u827:	
  1070  02B3  0BA0               	decfsz	??_putch,f
  1071  02B4  2AB3               	goto	u827
  1072  02B5  0064               	clrwdt
  1073  02B6                     l1472:	
  1074                           ;main.c: 149: while(bit_count)
  1075                           
  1076  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  1077  02B7  08A2               	movf	putch@bit_count,f
  1078  02B8  1903               	btfsc	3,2
  1079  02B9  2AC8               	goto	l309
  1080                           
  1081                           ;main.c: 150: {
  1082                           ;main.c: 151: if((ch & 0x01))
  1083  02BA  1C21               	btfss	putch@ch,0
  1084  02BB  2ABE               	goto	l307
  1085                           
  1086                           ;main.c: 152: GPIO2 = 1;
  1087  02BC  1505               	bsf	5,2
  1088  02BD  2ABF               	goto	l308
  1089  02BE                     l307:	
  1090                           
  1091                           ;main.c: 153: else
  1092                           ;main.c: 154: GPIO2 = 0;
  1093  02BE  1105               	bcf	5,2
  1094  02BF                     l308:	
  1095  02BF  3020               	movlw	32
  1096                           
  1097                           ;main.c: 155: ch = ch >> 1;
  1098  02C0  1003               	clrc
  1099  02C1  0CA1               	rrf	putch@ch,f
  1100                           
  1101                           ;main.c: 156: bit_count--;
  1102  02C2  03A2               	decf	putch@bit_count,f
  1103                           
  1104                           ;main.c: 157: _delay((unsigned long)((98)*(4000000/4000000.0)));
  1105  02C3  00A0               	movwf	??_putch
  1106  02C4                     u837:	
  1107  02C4  0BA0               	decfsz	??_putch,f
  1108  02C5  2AC4               	goto	u837
  1109  02C6  0064               	clrwdt
  1110  02C7  2AB6               	goto	l1472
  1111  02C8                     l309:	
  1112  02C8  3020               	movlw	32
  1113                           
  1114                           ;main.c: 158: }
  1115                           ;main.c: 159: GPIO2 = 1;
  1116  02C9  1505               	bsf	5,2
  1117                           
  1118                           ;main.c: 160: _delay((unsigned long)((98)*(4000000/4000000.0)));
  1119  02CA  00A0               	movwf	??_putch
  1120  02CB                     u847:	
  1121  02CB  0BA0               	decfsz	??_putch,f
  1122  02CC  2ACB               	goto	u847
  1123  02CD  0064               	clrwdt
  1124  02CE  0008               	return
  1125  02CF                     __end_of_putch:	
  1126                           
  1127                           	psect	text215
  1128  02CF                     __ptext215:	
  1129 ;; =============== function _putch ends ============
  1130                           
  1131                           
  1132 ;; *************** function ___lwmod *****************
  1133 ;; Defined at:
  1134 ;;		line 5 in file "C:\Program Files\HI-TECH Software\PICC\9.83\sources\lwmod.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;  divisor         2    0[BANK0 ] unsigned int 
  1137 ;;  dividend        2    2[BANK0 ] unsigned int 
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;  counter         1    4[BANK0 ] unsigned char 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  2    0[BANK0 ] unsigned int 
  1142 ;; Registers used:
  1143 ;;		wreg, status,2, status,0
  1144 ;; Tracked objects:
  1145 ;;		On entry : 20/0
  1146 ;;		On exit  : 20/0
  1147 ;;		Unchanged: FFFDF/0
  1148 ;; Data sizes:     COMMON   BANK0
  1149 ;;      Params:         0       4
  1150 ;;      Locals:         0       1
  1151 ;;      Temps:          0       0
  1152 ;;      Totals:         0       5
  1153 ;;Total ram usage:        5 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; This function calls:
  1156 ;;		Nothing
  1157 ;; This function is called by:
  1158 ;;		_printInt
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161  02CF                     ___lwmod:	
  1162                           
  1163                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1164  02CF  0821               	movf	___lwmod@divisor+1,w
  1165  02D0  0420               	iorwf	___lwmod@divisor,w
  1166  02D1  1903               	skipnz
  1167  02D2  2AEE               	goto	l1458
  1168  02D3  01A4               	clrf	___lwmod@counter
  1169  02D4                     L2:	
  1170  02D4  0AA4               	incf	___lwmod@counter,f
  1171  02D5  1BA1               	btfsc	___lwmod@divisor+1,7
  1172  02D6  2ADB               	goto	l1450
  1173  02D7  1003               	clrc
  1174  02D8  0DA0               	rlf	___lwmod@divisor,f
  1175  02D9  0DA1               	rlf	___lwmod@divisor+1,f
  1176  02DA  2AD4               	goto	L2
  1177  02DB                     l1450:	
  1178  02DB  0821               	movf	___lwmod@divisor+1,w
  1179  02DC  0223               	subwf	___lwmod@dividend+1,w
  1180  02DD  1D03               	skipz
  1181  02DE  2AE1               	goto	u505
  1182  02DF  0820               	movf	___lwmod@divisor,w
  1183  02E0  0222               	subwf	___lwmod@dividend,w
  1184  02E1                     u505:	
  1185  02E1  1C03               	skipc
  1186  02E2  2AEA               	goto	L3
  1187  02E3  0820               	movf	___lwmod@divisor,w
  1188  02E4  02A2               	subwf	___lwmod@dividend,f
  1189  02E5  0821               	movf	___lwmod@divisor+1,w
  1190  02E6  1C03               	skipc
  1191  02E7  03A3               	decf	___lwmod@dividend+1,f
  1192  02E8  02A3               	subwf	___lwmod@dividend+1,f
  1193  02E9  1003               	clrc
  1194  02EA                     L3:	
  1195  02EA  0CA1               	rrf	___lwmod@divisor+1,f
  1196  02EB  0CA0               	rrf	___lwmod@divisor,f
  1197  02EC  0BA4               	decfsz	___lwmod@counter,f
  1198  02ED  2ADB               	goto	l1450
  1199  02EE                     l1458:	
  1200  02EE  0823               	movf	___lwmod@dividend+1,w
  1201  02EF  00A1               	movwf	?___lwmod+1
  1202  02F0  0822               	movf	___lwmod@dividend,w
  1203  02F1  00A0               	movwf	?___lwmod
  1204  02F2  0008               	return
  1205  02F3                     __end_of___lwmod:	
  1206                           
  1207                           	psect	text216
  1208  02F3                     __ptext216:	
  1209 ;; =============== function ___lwmod ends ============
  1210                           
  1211                           
  1212 ;; *************** function ___lwdiv *****************
  1213 ;; Defined at:
  1214 ;;		line 5 in file "C:\Program Files\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  divisor         2    0[BANK0 ] unsigned int 
  1217 ;;  dividend        2    2[BANK0 ] unsigned int 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  quotient        2    4[BANK0 ] unsigned int 
  1220 ;;  counter         1    6[BANK0 ] unsigned char 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  2    0[BANK0 ] unsigned int 
  1223 ;; Registers used:
  1224 ;;		wreg, status,2, status,0
  1225 ;; Tracked objects:
  1226 ;;		On entry : 20/0
  1227 ;;		On exit  : 20/0
  1228 ;;		Unchanged: FFFDF/0
  1229 ;; Data sizes:     COMMON   BANK0
  1230 ;;      Params:         0       4
  1231 ;;      Locals:         0       3
  1232 ;;      Temps:          0       0
  1233 ;;      Totals:         0       7
  1234 ;;Total ram usage:        7 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_printInt
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242  02F3                     ___lwdiv:	
  1243                           
  1244                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1245  02F3  01A4               	clrf	___lwdiv@quotient
  1246  02F4  01A5               	clrf	___lwdiv@quotient+1
  1247  02F5  0821               	movf	___lwdiv@divisor+1,w
  1248  02F6  0420               	iorwf	___lwdiv@divisor,w
  1249  02F7  1903               	skipnz
  1250  02F8  2B18               	goto	l1438
  1251  02F9  01A6               	clrf	___lwdiv@counter
  1252  02FA                     L4:	
  1253  02FA  0AA6               	incf	___lwdiv@counter,f
  1254  02FB  1BA1               	btfsc	___lwdiv@divisor+1,7
  1255  02FC  2B01               	goto	l1426
  1256  02FD  1003               	clrc
  1257  02FE  0DA0               	rlf	___lwdiv@divisor,f
  1258  02FF  0DA1               	rlf	___lwdiv@divisor+1,f
  1259  0300  2AFA               	goto	L4
  1260  0301                     l1426:	
  1261  0301  1003               	clrc
  1262  0302  0DA4               	rlf	___lwdiv@quotient,f
  1263  0303  0DA5               	rlf	___lwdiv@quotient+1,f
  1264  0304  0821               	movf	___lwdiv@divisor+1,w
  1265  0305  0223               	subwf	___lwdiv@dividend+1,w
  1266  0306  1D03               	skipz
  1267  0307  2B0A               	goto	u465
  1268  0308  0820               	movf	___lwdiv@divisor,w
  1269  0309  0222               	subwf	___lwdiv@dividend,w
  1270  030A                     u465:	
  1271  030A  1C03               	skipc
  1272  030B  2B14               	goto	L5
  1273  030C  0820               	movf	___lwdiv@divisor,w
  1274  030D  02A2               	subwf	___lwdiv@dividend,f
  1275  030E  0821               	movf	___lwdiv@divisor+1,w
  1276  030F  1C03               	skipc
  1277  0310  03A3               	decf	___lwdiv@dividend+1,f
  1278  0311  02A3               	subwf	___lwdiv@dividend+1,f
  1279  0312  1424               	bsf	___lwdiv@quotient,0
  1280  0313  1003               	clrc
  1281  0314                     L5:	
  1282  0314  0CA1               	rrf	___lwdiv@divisor+1,f
  1283  0315  0CA0               	rrf	___lwdiv@divisor,f
  1284  0316  0BA6               	decfsz	___lwdiv@counter,f
  1285  0317  2B01               	goto	l1426
  1286  0318                     l1438:	
  1287  0318  0825               	movf	___lwdiv@quotient+1,w
  1288  0319  00A1               	movwf	?___lwdiv+1
  1289  031A  0824               	movf	___lwdiv@quotient,w
  1290  031B  00A0               	movwf	?___lwdiv
  1291  031C  0008               	return
  1292  031D                     __end_of___lwdiv:	
  1293                           
  1294                           	psect	text217
  1295  025E                     __ptext217:	
  1296 ;; =============== function ___lwdiv ends ============
  1297                           
  1298                           
  1299 ;; *************** function _toHex *****************
  1300 ;; Defined at:
  1301 ;;		line 361 in file "main.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  v               1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  v               1    0[BANK0 ] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      unsigned char 
  1308 ;; Registers used:
  1309 ;;		wreg, status,2, status,0
  1310 ;; Tracked objects:
  1311 ;;		On entry : 20/0
  1312 ;;		On exit  : 20/0
  1313 ;;		Unchanged: FFFDF/0
  1314 ;; Data sizes:     COMMON   BANK0
  1315 ;;      Params:         0       0
  1316 ;;      Locals:         0       1
  1317 ;;      Temps:          0       0
  1318 ;;      Totals:         0       1
  1319 ;;Total ram usage:        1 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; This function calls:
  1322 ;;		Nothing
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327  025E                     _toHex:	
  1328                           
  1329                           ; Regs used in _toHex: [wreg+status,2+status,0]
  1330                           ;toHex@v stored from wreg
  1331  025E  00A0               	movwf	toHex@v
  1332                           
  1333                           ;main.c: 362: if(v >= 10)
  1334  025F  300A               	movlw	10
  1335  0260  0220               	subwf	toHex@v,w
  1336  0261  1C03               	skipc
  1337  0262  2A65               	goto	l384
  1338                           
  1339                           ;main.c: 363: v += 'A'-'0'-10;
  1340  0263  3007               	movlw	7
  1341  0264  07A0               	addwf	toHex@v,f
  1342  0265                     l384:	
  1343                           
  1344                           ;main.c: 364: v += '0';
  1345  0265  3030               	movlw	48
  1346  0266  07A0               	addwf	toHex@v,f
  1347                           
  1348                           ;main.c: 365: return v;
  1349  0267  0820               	movf	toHex@v,w
  1350  0268  0008               	return
  1351  0269                     __end_of_toHex:	
  1352                           
  1353                           	psect	text218
  1354  0275                     __ptext218:	
  1355 ;; =============== function _toHex ends ============
  1356                           
  1357                           
  1358 ;; *************** function _readIrSensor *****************
  1359 ;; Defined at:
  1360 ;;		line 230 in file "main.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  port            1    1[BANK0 ] unsigned char 
  1365 ;;  l               1    0[BANK0 ] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      unsigned char 
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 20/0
  1373 ;;		Unchanged: FFFDF/0
  1374 ;; Data sizes:     COMMON   BANK0
  1375 ;;      Params:         0       0
  1376 ;;      Locals:         0       2
  1377 ;;      Temps:          0       0
  1378 ;;      Totals:         0       2
  1379 ;;Total ram usage:        2 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; This function calls:
  1382 ;;		Nothing
  1383 ;; This function is called by:
  1384 ;;		_readMark
  1385 ;;		_readData
  1386 ;;		_getIrData
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389  0275                     _readIrSensor:	
  1390                           
  1391                           ;main.c: 231: unsigned char l=2;
  1392                           
  1393                           ; Regs used in _readIrSensor: [wreg+status,2+status,0]
  1394  0275  3002               	movlw	2
  1395  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1396  0277  00A0               	movwf	readIrSensor@l
  1397                           
  1398                           ;main.c: 232: unsigned char port = GPIO3;
  1399  0278  3000               	movlw	0
  1400  0279  1985               	btfsc	5,3
  1401  027A  3001               	movlw	1
  1402  027B  00A1               	movwf	readIrSensor@port
  1403  027C                     l323:	
  1404                           ;main.c: 233: do
  1405                           
  1406                           
  1407                           ;main.c: 234: {
  1408                           ;main.c: 236: if( GPIO3 != port)
  1409  027C  3000               	movlw	0
  1410  027D  1985               	btfsc	5,3
  1411  027E  3001               	movlw	1
  1412  027F  0621               	xorwf	readIrSensor@port,w
  1413  0280  1903               	skipnz
  1414  0281  2A87               	goto	l1402
  1415                           
  1416                           ;main.c: 237: port = GPIO3;
  1417  0282  3000               	movlw	0
  1418  0283  1985               	btfsc	5,3
  1419  0284  3001               	movlw	1
  1420  0285  00A1               	movwf	readIrSensor@port
  1421  0286  2A88               	goto	l325
  1422  0287                     l1402:	
  1423                           
  1424                           ;main.c: 238: else
  1425                           ;main.c: 239: l--;
  1426  0287  03A0               	decf	readIrSensor@l,f
  1427  0288                     l325:	
  1428                           
  1429                           ;main.c: 240: }
  1430                           ;main.c: 241: while(l);
  1431  0288  08A0               	movf	readIrSensor@l,f
  1432  0289  1D03               	skipz
  1433  028A  2A7C               	goto	l323
  1434                           
  1435                           ;main.c: 242: return port;
  1436  028B  0821               	movf	readIrSensor@port,w
  1437  028C  0008               	return
  1438  028D                     __end_of_readIrSensor:	
  1439                           
  1440                           	psect	text219
  1441  0269                     __ptext219:	
  1442 ;; =============== function _readIrSensor ends ============
  1443                           
  1444                           
  1445 ;; *************** function _configure *****************
  1446 ;; Defined at:
  1447 ;;		line 215 in file "main.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;		None
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;		None
  1452 ;; Return value:  Size  Location     Type
  1453 ;;		None               void
  1454 ;; Registers used:
  1455 ;;		wreg, status,2
  1456 ;; Tracked objects:
  1457 ;;		On entry : 17F/0
  1458 ;;		On exit  : 17F/0
  1459 ;;		Unchanged: FFE80/0
  1460 ;; Data sizes:     COMMON   BANK0
  1461 ;;      Params:         0       0
  1462 ;;      Locals:         0       0
  1463 ;;      Temps:          0       0
  1464 ;;      Totals:         0       0
  1465 ;;Total ram usage:        0 bytes
  1466 ;; Hardware stack levels used:    1
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_main
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473  0269                     _configure:	
  1474                           
  1475                           ;main.c: 218: GPIO = 0;
  1476                           
  1477                           ; Regs used in _configure: [wreg+status,2]
  1478  0269  0185               	clrf	5	;volatile
  1479                           
  1480                           ;main.c: 219: CMCON = 0x07;
  1481  026A  3007               	movlw	7
  1482  026B  0099               	movwf	25	;volatile
  1483                           
  1484                           ;main.c: 220: TRISIO = 0b11001000;
  1485  026C  30C8               	movlw	200
  1486  026D  1683               	bsf	3,5	;RP0=1, select bank1
  1487  026E  0085               	movwf	5	;volatile
  1488                           
  1489                           ;main.c: 223: GPIO1 = 1;
  1490  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1491  0270  1485               	bsf	5,1
  1492                           
  1493                           ;main.c: 224: GPIO0 = 0;
  1494  0271  1005               	bcf	5,0
  1495                           
  1496                           ;main.c: 225: GPIO5 = 1;
  1497  0272  1685               	bsf	5,5
  1498                           
  1499                           ;main.c: 226: GPIO2 = 1;
  1500  0273  1505               	bsf	5,2
  1501  0274  0008               	return
  1502  0275                     __end_of_configure:	
  1503                           
  1504                           	psect	text220
  1505  0000                     __ptext220:	
  1506 ;; =============== function _configure ends ============
  1507                           
  1508  005E                     btemp	set	94	;btemp
  1509  005E                     wtemp0	set	94


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Mon Jan 06 00:41:31 2014

         printInt@data 0027                    l310 0000                    l320 0000                    l323 027C  
                  l307 02BE                    l315 0396                    l308 02BF                    l325 0288  
                  l309 02C8                    l317 0000                    l327 0000                    l345 03BA  
                  l364 03FC                    l384 0265                    l385 0000                    l388 0359  
                  l739 0000                    l749 0000       readIrSensor@port 0021                    u505 02E1  
                  u465 030A                    u715 0389                    u817 0364                    u827 02B3  
                  u837 02C4                    u847 02CB                    fsr0 0004                    indf 0000  
                 l1402 0287                   l1412 0000                   l1510 0000                   l1408 0000  
                 l1432 0000                   l1416 0000                   l1426 0301                   l1418 0000  
                 l1450 02DB                   l1442 0000                   l1530 03D0                   l1514 03BB  
                 l1436 0000                   l1428 0000                   l1516 03C1                   l1508 0000  
                 l1612 0342                   l1620 0000                   l1390 0000                   l1438 0318  
                 l1470 0000                   l1462 0000                   l1614 0344                   l1622 0000  
                 l1392 0000                   l1384 0000                   l1456 0000                   l1472 02B6  
                 l1464 0000                   l1480 028E                   l1560 0000                   l1544 03E1  
                 l1536 03DB                   l1528 03CA                   l1624 0000                   l1394 0000  
                 l1386 0000                   l1458 02EE                   l1474 0000                   l1482 0294  
                 l1562 0000                   l1626 0349                   l1618 0000                   l1396 0000  
                 l1388 0000                   l1468 0000                   l1476 0000                   l1564 0000  
                 l1548 0000                   l1556 03E9                   l1580 0000                   l1398 0000  
                 l1494 029D                   l1566 0000                   l1590 0322                   l1496 02A3  
                 l1568 0000                   l1584 037E                   l1576 0000                   l1592 0000  
                 l1594 0000                   l1586 0000                   l1588 031D                   l1598 0000  
                 _GPIO 0005                   _main 0347                   btemp 005E                   start 0000  
                ?_main 0020                  _CMCON 0019                  _GPIO0 0028                  _GPIO1 0029  
                _GPIO2 002A                  _GPIO3 002B                  _GPIO4 002C                  _GPIO5 002D  
      __end_of___lwdiv 031D        __end_of___lwmod 02F3                  _error 0031                  _toHex 025E  
                _putch 02AC                  status 0003                  wtemp0 005E           __end_of_main 037A  
        ?_readIrSensor 0020                 ??_main 002D                 ?_toHex 0020                 ?_putch 0020  
               _TRISIO 0085              ??___lwdiv 0000              ??___lwmod 0000       __end_of_readData 03FF  
     __end_of_readMark 02AC         ??_readIrSensor 0000                 toHex@v 0020       __end_of_printInt 03B4  
       __pcstackCOMMON 0000          __end_of_toHex 0269          __end_of_putch 02CF     __size_of_getIrData 002A  
   __size_of_configure 000C                ??_toHex 0000                ??_putch 0020             __pbssBANK0 0031  
           __pmaintext 0347           readData@mask 0026           readData@size 0022         readData@irdata 0023  
            ?_readData 0022              ?_readMark 0020   __end_of_readIrSensor 028D      __end_of_getIrData 0347  
            ?_printInt 0027      __end_of_configure 0275                ___lwdiv 02F3                ___lwmod 02CF  
 end_of_initialization 025C             ??_readData 0000             ??_readMark 0000             ??_printInt 0000  
              putch@ch 0021        getIrData@irdata 0028            printInt@div 002A            printInt@val 0029  
       putch@bit_count 0022    start_initialization 025B  __size_of_readIrSensor 0018           _readIrSensor 0275  
        __pcstackBANK0 0020          _osccallibrate 03FF      __size_of_readData 004B      __size_of_readMark 001F  
     ___lwdiv@dividend 0022              _getIrData 031D              __ptext210 031D              __ptext211 037A  
            __ptext220 0000              __ptext212 03B4              __ptext213 028D              __ptext214 02AC  
            __ptext215 02CF              __ptext216 02F3              __ptext217 025E              __ptext218 0275  
            __ptext219 0269               ?___lwdiv 0020               ?___lwmod 0020          readData@count 0027  
        readData@value 0025      __size_of_printInt 003A  __p_osccallibrate_text 03FF     readData@byte_count 0024  
            __pstrings 0000              _configure 0269       ___lwdiv@quotient 0024         __size_of_toHex 000B  
       __size_of_putch 0023  _osccallibrate_absaddr 03FF             ?_getIrData 0020             ?_configure 0020  
        readIrSensor@l 0020          readMark@count 0022       __size_of___lwdiv 002A       __size_of___lwmod 0024  
      ___lwdiv@divisor 0020        ___lwdiv@counter 0026               _readData 03B4               _readMark 028D  
        __size_of_main 0033            ??_getIrData 0000               _printInt 037A               main@data 0030  
          ??_configure 0000       ___lwmod@dividend 0022        ___lwmod@divisor 0020        ___lwmod@counter 0024  
