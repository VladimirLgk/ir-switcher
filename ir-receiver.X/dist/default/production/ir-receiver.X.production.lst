

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Jan 07 15:27:49 2014

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	12F629
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	_osccallibrate_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text220,local,class=CODE,delta=2
    13                           	psect	text221,local,class=CODE,delta=2
    14                           	psect	text222,local,class=CODE,delta=2
    15                           	psect	text223,local,class=CODE,delta=2
    16                           	psect	text224,local,class=CODE,delta=2
    17                           	psect	text225,local,class=CODE,delta=2
    18                           	psect	text226,local,class=CODE,delta=2
    19                           	psect	text227,local,class=CODE,delta=2
    20                           	psect	text228,local,class=CODE,delta=2
    21                           	psect	text229,local,class=CODE,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text230,local,class=CODE,delta=2
    24                           	psect	text231,local,class=CODE,delta=2
    25                           	psect	pa_nodes,global,class=CODE,delta=2
    26                           	dabs	1,0x5E,2
    27  000A                     	;#
    28                           
    29                           	psect	config
    30  2007  31D4               	dw	12756	;#
    31  03FF                     _osccallibrate_absaddr	set	1023
    32  03FF                     _osccallibrate_absaddr	set	1023
    33                           
    34                           	psect	strings
    35  0000                     __pstrings:	
    36                           
    37                           	psect	_osccallibrate_text
    38  03FF                     __p_osccallibrate_text:	
    39  03FF                     _osccallibrate:	
    40  03FF  3430               	retlw	48
    41  0019                     _CMCON	set	25
    42  0005                     _GPIO	set	5
    43  0028                     _GPIO0	set	40
    44  0029                     _GPIO1	set	41
    45  002A                     _GPIO2	set	42
    46  002B                     _GPIO3	set	43
    47  002C                     _GPIO4	set	44
    48  002D                     _GPIO5	set	45
    49  0085                     _TRISIO	set	133
    50                           
    51                           	psect	cinit
    52  028A                     start_initialization:	
    53                           
    54                           ; Clear objects allocated to BANK0
    55  028A  01B8               	clrf	__pbssBANK0& (0+127)
    56  028B  01B9               	clrf	(__pbssBANK0+1)& (0+127)
    57  028C                     end_of_initialization:	
    58                           ;End of C runtime variable initialization code
    59                           
    60  028C  0183               	clrf	3
    61  028D  2B6B               	ljmp	_main	;jump to C main() function
    62                           
    63                           	psect	bssBANK0
    64  0038                     __pbssBANK0:	
    65  0038                     _count:	
    66  0038                     	ds	1
    67  0039                     _error:	
    68  0039                     	ds	1
    69                           
    70                           	psect	cstackCOMMON
    71  0000                     __pcstackCOMMON:	
    72  0000                     ??_lcd_write:	
    73  0000                     ??_lcd_puts:	
    74                           ; 0 bytes @ 0x0
    75                           
    76  0000                     ??_lcd_cmd:	
    77                           ; 0 bytes @ 0x0
    78                           
    79  0000                     ??_lcd_clear:	
    80                           ; 0 bytes @ 0x0
    81                           
    82  0000                     ??_to7hex:	
    83                           ; 0 bytes @ 0x0
    84                           
    85  0000                     ??_configure:	
    86                           ; 0 bytes @ 0x0
    87                           
    88  0000                     ??_readIrSensor:	
    89                           ; 0 bytes @ 0x0
    90                           
    91  0000                     ??_readMark:	
    92                           ; 0 bytes @ 0x0
    93                           
    94  0000                     ??_readData:	
    95                           ; 0 bytes @ 0x0
    96                           
    97  0000                     ??_getIrData:	
    98                           ; 0 bytes @ 0x0
    99                           
   100                           
   101                           	psect	cstackBANK0
   102  0020                     __pcstackBANK0:	
   103                           ; 0 bytes @ 0x0
   104                           
   105  0020                     ?_lcd_write:	
   106  0020                     ?_lcd_cmd:	
   107                           ; 0 bytes @ 0x0
   108                           
   109  0020                     ?_lcd_clear:	
   110                           ; 0 bytes @ 0x0
   111                           
   112  0020                     ?_lcd_init:	
   113                           ; 0 bytes @ 0x0
   114                           
   115  0020                     ?_configure:	
   116                           ; 0 bytes @ 0x0
   117                           
   118  0020                     ?_main:	
   119                           ; 0 bytes @ 0x0
   120                           
   121  0020                     ?_to7hex:	
   122                           ; 0 bytes @ 0x0
   123                           
   124  0020                     ?_readIrSensor:	
   125                           ; 1 bytes @ 0x0
   126                           
   127  0020                     ?_readMark:	
   128                           ; 1 bytes @ 0x0
   129                           
   130  0020                     ?_getIrData:	
   131                           ; 1 bytes @ 0x0
   132                           
   133  0020                     lcd_write@data:	
   134                           ; 1 bytes @ 0x0
   135                           
   136  0020                     to7hex@val:	
   137                           ; 1 bytes @ 0x0
   138                           
   139  0020                     readIrSensor@c:	
   140                           ; 1 bytes @ 0x0
   141                           
   142                           
   143                           ; 1 bytes @ 0x0
   144  0020                     	ds	1
   145  0021                     lcd_write@bitCount:	
   146  0021                     readIrSensor@port:	
   147                           ; 1 bytes @ 0x1
   148                           
   149                           
   150                           ; 1 bytes @ 0x1
   151  0021                     	ds	1
   152  0022                     ?_lcd_puts:	
   153  0022                     ?_readData:	
   154                           ; 0 bytes @ 0x2
   155                           
   156  0022                     lcd_puts@data:	
   157                           ; 1 bytes @ 0x2
   158                           
   159  0022                     lcd_cmd@cmd:	
   160                           ; 1 bytes @ 0x2
   161                           
   162  0022                     lcd_clear@count:	
   163                           ; 1 bytes @ 0x2
   164                           
   165  0022                     readData@size:	
   166                           ; 1 bytes @ 0x2
   167                           
   168                           
   169                           ; 1 bytes @ 0x2
   170  0022                     	ds	1
   171  0023                     ??_lcd_init:	
   172  0023                     lcd_puts@size:	
   173                           ; 0 bytes @ 0x3
   174                           
   175  0023                     readData@irdata:	
   176                           ; 1 bytes @ 0x3
   177                           
   178                           
   179                           ; 1 bytes @ 0x3
   180  0023                     	ds	1
   181  0024                     lcd_puts@address:	
   182  0024                     readData@byte_count:	
   183                           ; 1 bytes @ 0x4
   184                           
   185                           
   186                           ; 1 bytes @ 0x4
   187  0024                     	ds	1
   188  0025                     readData@value:	
   189                           
   190                           ; 1 bytes @ 0x5
   191  0025                     	ds	1
   192  0026                     readData@mask:	
   193                           
   194                           ; 1 bytes @ 0x6
   195  0026                     	ds	1
   196  0027                     getIrData@irdata:	
   197                           
   198                           ; 5 bytes @ 0x7
   199  0027                     	ds	5
   200  002C                     ??_main:	
   201                           
   202                           ; 0 bytes @ 0xC
   203  002C                     	ds	3
   204  002F                     main@lcd_data:	
   205                           
   206                           ; 8 bytes @ 0xF
   207  002F                     	ds	8
   208  0037                     main@data:	
   209                           
   210                           ; 1 bytes @ 0x17
   211  0037                     	ds	1
   212                           
   213                           	psect	maintext
   214  036B                     __pmaintext:	
   215 ;;Data sizes: Strings 0, constant 0, data 0, bss 2, persistent 0 stack 0
   216 ;;Auto spaces:   Size  Autos    Used
   217 ;; COMMON           0      0       0
   218 ;; BANK0           62     24      26
   219 ;;
   220 ;; Pointer list with targets:
   221 ;; readData@irdata	PTR unsigned char  size(1) Largest target is 5
   222 ;;		 -> getIrData@irdata(BANK0[5]), 
   223 ;;
   224 ;; lcd_puts@data	PTR unsigned char  size(1) Largest target is 8
   225 ;;		 -> main@lcd_data(BANK0[8]), 
   226 ;;
   227 ;;
   228 ;; Critical Paths under _main in COMMON
   229 ;;
   230 ;;   None.
   231 ;;
   232 ;; Critical Paths under _main in BANK0
   233 ;;
   234 ;;   _main->_getIrData
   235 ;;   _getIrData->_readData
   236 ;;   _lcd_init->_lcd_cmd
   237 ;;   _lcd_init->_lcd_clear
   238 ;;   _readData->_readIrSensor
   239 ;;   _readMark->_readIrSensor
   240 ;;   _lcd_clear->_lcd_write
   241 ;;   _lcd_cmd->_lcd_write
   242 ;;   _lcd_puts->_lcd_write
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   245 ;;
   246 ;;
   247 ;;Call Graph Tables:
   248 ;;
   249 ;; ---------------------------------------------------------------------------------
   250 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   251 ;; ---------------------------------------------------------------------------------
   252 ;; (0) _main                                                12    12      0    1190
   253 ;;                                             12 BANK0     12    12      0
   254 ;;                          _configure
   255 ;;                           _lcd_init
   256 ;;                           _lcd_puts
   257 ;;                          _getIrData
   258 ;;                             _to7hex
   259 ;; ---------------------------------------------------------------------------------
   260 ;; (1) _getIrData                                            5     5      0     489
   261 ;;                                              7 BANK0      5     5      0
   262 ;;                           _readMark
   263 ;;                           _readData
   264 ;; ---------------------------------------------------------------------------------
   265 ;; (1) _lcd_init                                             3     3      0     140
   266 ;;                                              3 BANK0      3     3      0
   267 ;;                            _lcd_cmd
   268 ;;                          _lcd_clear
   269 ;; ---------------------------------------------------------------------------------
   270 ;; (2) _readData                                             5     4      1     258
   271 ;;                                              2 BANK0      5     4      1
   272 ;;                       _readIrSensor
   273 ;; ---------------------------------------------------------------------------------
   274 ;; (2) _readMark                                             0     0      0      70
   275 ;;                       _readIrSensor
   276 ;; ---------------------------------------------------------------------------------
   277 ;; (2) _lcd_clear                                            1     1      0      71
   278 ;;                                              2 BANK0      1     1      0
   279 ;;                          _lcd_write
   280 ;; ---------------------------------------------------------------------------------
   281 ;; (2) _lcd_cmd                                              1     1      0      69
   282 ;;                                              2 BANK0      1     1      0
   283 ;;                          _lcd_write
   284 ;; ---------------------------------------------------------------------------------
   285 ;; (1) _lcd_puts                                             3     1      2     136
   286 ;;                                              2 BANK0      3     1      2
   287 ;;                          _lcd_write
   288 ;; ---------------------------------------------------------------------------------
   289 ;; (3) _readIrSensor                                         2     2      0      70
   290 ;;                                              0 BANK0      2     2      0
   291 ;; ---------------------------------------------------------------------------------
   292 ;; (1) _configure                                            0     0      0       0
   293 ;; ---------------------------------------------------------------------------------
   294 ;; (1) _to7hex                                               1     1      0      22
   295 ;;                                              0 BANK0      1     1      0
   296 ;; ---------------------------------------------------------------------------------
   297 ;; (2) _lcd_write                                            2     2      0      47
   298 ;;                                              0 BANK0      2     2      0
   299 ;; ---------------------------------------------------------------------------------
   300 ;; Estimated maximum stack depth 3
   301 ;; ---------------------------------------------------------------------------------
   302 ;; Call Graph Graphs:
   303 ;; _main (ROOT)
   304 ;;   _configure
   305 ;;   _lcd_init
   306 ;;     _lcd_cmd
   307 ;;       _lcd_write
   308 ;;     _lcd_clear
   309 ;;       _lcd_write
   310 ;;   _lcd_puts
   311 ;;     _lcd_write
   312 ;;   _getIrData
   313 ;;     _readMark
   314 ;;       _readIrSensor
   315 ;;     _readData
   316 ;;       _readIrSensor
   317 ;;   _to7hex
   318 ;;
   319 ;; Address spaces:
   320 ;;Name               Size   Autos  Total    Cost      Usage
   321 ;;BITCOMMON            0      0       0       0        0.0%
   322 ;;EEDATA              80      0       0       0        0.0%
   323 ;;NULL                 0      0       0       0        0.0%
   324 ;;CODE                 0      0       0       0        0.0%
   325 ;;BITSFR0              0      0       0       1        0.0%
   326 ;;SFR0                 0      0       0       1        0.0%
   327 ;;COMMON               0      0       0       1        0.0%
   328 ;;BITSFR1              0      0       0       2        0.0%
   329 ;;SFR1                 0      0       0       2        0.0%
   330 ;;STACK                0      0       3       2        0.0%
   331 ;;BITBANK0            3E      0       0       3        0.0%
   332 ;;BANK0               3E     18      1A       4       41.9%
   333 ;;ABS                  0      0      1A       5        0.0%
   334 ;;DATA                 0      0      1D       6        0.0%
   335                           
   336                           
   337 ;; *************** function _main *****************
   338 ;; Defined at:
   339 ;;		line 356 in file "main.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;  data            1   23[BANK0 ] unsigned char 
   344 ;;  lcd_data        8   15[BANK0 ] unsigned char [8]
   345 ;; Return value:  Size  Location     Type
   346 ;;		None               void
   347 ;; Registers used:
   348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : 17F/0
   351 ;;		On exit  : 20/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMMON   BANK0
   354 ;;      Params:         0       0
   355 ;;      Locals:         0       9
   356 ;;      Temps:          0       3
   357 ;;      Totals:         0      12
   358 ;;Total ram usage:       12 bytes
   359 ;; Hardware stack levels required when called:    3
   360 ;; This function calls:
   361 ;;		_configure
   362 ;;		_lcd_init
   363 ;;		_lcd_puts
   364 ;;		_getIrData
   365 ;;		_to7hex
   366 ;; This function is called by:
   367 ;;		Startup code after reset
   368 ;; This function uses a non-reentrant model
   369 ;;
   370  036B                     _main:	
   371                           
   372                           ;main.c: 357: configure();
   373                           
   374                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   375  036B  2294               	fcall	_configure
   376                           
   377                           ;main.c: 358: lcd_init();
   378  036C  22C4               	fcall	_lcd_init
   379  036D  2B83               	goto	l1812
   380  036E                     l1824:	
   381  036E  3073               	movlw	115
   382                           
   383                           ;main.c: 369: {
   384                           ;main.c: 370: lcd_data[0] = 0;
   385  036F  01AF               	clrf	main@lcd_data
   386                           
   387                           ;main.c: 371: lcd_data[1] = 0b01110011;
   388  0370  00B0               	movwf	main@lcd_data+1
   389                           
   390                           ;main.c: 372: lcd_data[2] = 0b00011000;
   391  0371  3018               	movlw	24
   392  0372  00B1               	movwf	main@lcd_data+2
   393                           
   394                           ;main.c: 373: lcd_data[3] = to7hex((data >> 4) & 0xf);
   395  0373  0E37               	swapf	main@data,w
   396  0374  390F               	andlw	15
   397  0375  2308               	fcall	_to7hex
   398  0376  00B2               	movwf	main@lcd_data+3
   399                           
   400                           ;main.c: 374: lcd_data[4] = to7hex(data & 0xf);
   401  0377  0837               	movf	main@data,w
   402  0378  390F               	andlw	15
   403  0379  2308               	fcall	_to7hex
   404  037A  00B3               	movwf	main@lcd_data+4
   405                           
   406                           ;main.c: 375: lcd_data[5] = 0;
   407  037B  01B4               	clrf	main@lcd_data+5
   408                           
   409                           ;main.c: 376: lcd_data[6] = 0;
   410  037C  01B5               	clrf	main@lcd_data+6
   411  037D                     L1:	
   412                           
   413                           ;main.c: 377: lcd_puts(0 , lcd_data, 7);
   414  037D  302F               	movlw	main@lcd_data& (0+255)
   415  037E  00A2               	movwf	?_lcd_puts
   416  037F  3007               	movlw	7
   417  0380  00A3               	movwf	?_lcd_puts+1
   418  0381  3000               	movlw	0
   419  0382  22F1               	fcall	_lcd_puts
   420  0383                     l1812:	
   421                           ;main.c: 378: }
   422                           
   423                           
   424                           ;main.c: 361: {
   425                           ;main.c: 362: _delay((unsigned long)((500)*(4000000/4000.0)));
   426  0383  3003               	movlw	3
   427  0384  00AE               	movwf	??_main+2
   428  0385  308A               	movlw	138
   429  0386  00AD               	movwf	??_main+1
   430  0387  3056               	movlw	86
   431  0388  00AC               	movwf	??_main
   432  0389                     u637:	
   433  0389  0BAC               	decfsz	??_main,f
   434  038A  2B89               	goto	u637
   435  038B  0BAD               	decfsz	??_main+1,f
   436  038C  2B89               	goto	u637
   437  038D  0BAE               	decfsz	??_main+2,f
   438  038E  2B89               	goto	u637
   439  038F  2B90               	nop2
   440                           
   441                           ;main.c: 363: error = 0;
   442  0390  1283               	bcf	3,5	;RP0=0, select bank0
   443  0391  01B9               	clrf	_error	;volatile
   444                           
   445                           ;main.c: 364: lcd_data[0] = 0b10000000;
   446  0392  3080               	movlw	128
   447  0393  00AF               	movwf	main@lcd_data
   448                           
   449                           ;main.c: 365: lcd_puts(0 , lcd_data, 1);
   450  0394  302F               	movlw	main@lcd_data& (0+255)
   451  0395  00A2               	movwf	?_lcd_puts
   452  0396  3000               	movlw	0
   453  0397  01A3               	clrf	?_lcd_puts+1
   454  0398  0AA3               	incf	?_lcd_puts+1,f
   455  0399  22F1               	fcall	_lcd_puts
   456                           
   457                           ;main.c: 367: unsigned char data = getIrData();
   458  039A  2326               	fcall	_getIrData
   459  039B  00B7               	movwf	main@data
   460                           
   461                           ;main.c: 368: if(error == 0)
   462  039C  08B9               	movf	_error,f
   463  039D  1903               	btfsc	3,2
   464  039E  2B6E               	goto	l1824
   465  039F  3079               	movlw	121
   466                           
   467                           ;main.c: 379: else
   468                           ;main.c: 380: {
   469                           ;main.c: 381: lcd_data[0] = 0;
   470  03A0  01AF               	clrf	main@lcd_data
   471                           
   472                           ;main.c: 382: lcd_data[1] = 0b01111001;
   473  03A1  00B0               	movwf	main@lcd_data+1
   474                           
   475                           ;main.c: 383: lcd_data[2] = 0b00000000;
   476  03A2  01B1               	clrf	main@lcd_data+2
   477                           
   478                           ;main.c: 384: lcd_data[3] = to7hex((error >> 4) & 0xf);
   479  03A3  0E39               	swapf	_error,w	;volatile
   480  03A4  390F               	andlw	15
   481  03A5  2308               	fcall	_to7hex
   482  03A6  00B2               	movwf	main@lcd_data+3
   483                           
   484                           ;main.c: 385: lcd_data[4] = to7hex(error & 0xf);
   485  03A7  0839               	movf	_error,w
   486  03A8  390F               	andlw	15
   487  03A9  2308               	fcall	_to7hex
   488  03AA  00B3               	movwf	main@lcd_data+4
   489                           
   490                           ;main.c: 386: lcd_data[5] = to7hex((count >> 4) & 0xf);
   491  03AB  0E38               	swapf	_count,w	;volatile
   492  03AC  390F               	andlw	15
   493  03AD  2308               	fcall	_to7hex
   494  03AE  00B4               	movwf	main@lcd_data+5
   495                           
   496                           ;main.c: 387: lcd_data[6] = to7hex(count & 0xf);
   497  03AF  0838               	movf	_count,w
   498  03B0  390F               	andlw	15
   499  03B1  2308               	fcall	_to7hex
   500  03B2  00B5               	movwf	main@lcd_data+6
   501  03B3  2B7D               	goto	L1
   502  03B4                     __end_of_main:	
   503                           ;main.c: 388: lcd_puts(0,lcd_data, 7);
   504                           
   505                           
   506                           	psect	text220
   507  0326                     __ptext220:	
   508 ;; =============== function _main ends ============
   509                           
   510                           
   511 ;; *************** function _getIrData *****************
   512 ;; Defined at:
   513 ;;		line 322 in file "main.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;		None
   516 ;; Auto vars:     Size  Location     Type
   517 ;;  irdata          5    7[BANK0 ] unsigned char [5]
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      unsigned char 
   520 ;; Registers used:
   521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 20/0
   524 ;;		On exit  : 20/0
   525 ;;		Unchanged: FFEDF/0
   526 ;; Data sizes:     COMMON   BANK0
   527 ;;      Params:         0       0
   528 ;;      Locals:         0       5
   529 ;;      Temps:          0       0
   530 ;;      Totals:         0       5
   531 ;;Total ram usage:        5 bytes
   532 ;; Hardware stack levels used:    1
   533 ;; Hardware stack levels required when called:    2
   534 ;; This function calls:
   535 ;;		_readMark
   536 ;;		_readData
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541  0326                     _getIrData:	
   542                           
   543                           ;main.c: 323: unsigned char irdata[5];
   544                           ;main.c: 324: error = readMark();
   545                           
   546                           ; Regs used in _getIrData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   547  0326  2346               	fcall	_readMark
   548  0327  00B9               	movwf	_error	;volatile
   549                           
   550                           ;main.c: 325: if(! error)
   551  0328  08B9               	movf	_error,f
   552  0329  1D03               	skipz
   553  032A  3400               	retlw	0
   554                           
   555                           ;main.c: 326: {
   556                           ;main.c: 327: error = readData(irdata, sizeof(irdata));
   557  032B  3005               	movlw	5
   558  032C  00A2               	movwf	?_readData
   559  032D  3027               	movlw	getIrData@irdata& (0+255)
   560  032E  23B4               	fcall	_readData
   561  032F  00B9               	movwf	_error	;volatile
   562                           
   563                           ;main.c: 328: if(! error)
   564  0330  08B9               	movf	_error,f
   565  0331  1D03               	skipz
   566  0332  3400               	retlw	0
   567                           
   568                           ;main.c: 329: {
   569                           ;main.c: 330: if((irdata[0] == (unsigned char)~(irdata[1])) &&
   570                           ;main.c: 331: (irdata[0] == 0x82))
   571  0333  0928               	comf	getIrData@irdata+1,w
   572  0334  0627               	xorwf	getIrData@irdata,w
   573  0335  1D03               	skipz
   574  0336  2B43               	goto	l1806
   575  0337  0827               	movf	getIrData@irdata,w
   576  0338  3A82               	xorlw	130
   577  0339  1D03               	skipz
   578  033A  2B43               	goto	l1806
   579                           
   580                           ;main.c: 332: {
   581                           ;main.c: 333: if(irdata[2] == (unsigned char) ~(irdata[3]))
   582  033B  092A               	comf	getIrData@irdata+3,w
   583  033C  0629               	xorwf	getIrData@irdata+2,w
   584  033D  1D03               	skipz
   585  033E  2B41               	goto	l1804
   586                           
   587                           ;main.c: 334: {
   588                           ;main.c: 335: return irdata[2];
   589  033F  0829               	movf	getIrData@irdata+2,w
   590  0340  0008               	return
   591  0341                     l1804:	
   592                           
   593                           ;main.c: 337: else
   594                           ;main.c: 338: error = 7;
   595  0341  3007               	movlw	7
   596  0342  2B44               	goto	L2
   597  0343                     l1806:	
   598                           
   599                           ;main.c: 340: else
   600                           ;main.c: 341: error = 6;
   601  0343  3006               	movlw	6
   602  0344                     L2:	
   603  0344  00B9               	movwf	_error	;volatile
   604                           
   605                           ;main.c: 342: }
   606                           ;main.c: 343: }
   607                           ;main.c: 344: return 0;
   608  0345  3400               	retlw	0
   609  0346                     __end_of_getIrData:	
   610                           
   611                           	psect	text221
   612  02C4                     __ptext221:	
   613 ;; =============== function _getIrData ends ============
   614                           
   615                           
   616 ;; *************** function _lcd_init *****************
   617 ;; Defined at:
   618 ;;		line 103 in file "main.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;		None
   621 ;; Auto vars:     Size  Location     Type
   622 ;;		None
   623 ;; Return value:  Size  Location     Type
   624 ;;		None               void
   625 ;; Registers used:
   626 ;;		wreg, status,2, status,0, pclath, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : 17F/0
   629 ;;		On exit  : 20/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0
   632 ;;      Params:         0       0
   633 ;;      Locals:         0       0
   634 ;;      Temps:          0       3
   635 ;;      Totals:         0       3
   636 ;;Total ram usage:        3 bytes
   637 ;; Hardware stack levels used:    1
   638 ;; Hardware stack levels required when called:    2
   639 ;; This function calls:
   640 ;;		_lcd_cmd
   641 ;;		_lcd_clear
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646  02C4                     _lcd_init:	
   647                           
   648                           ;main.c: 104: _delay((unsigned long)((200)*(4000000/4000.0)));
   649                           
   650                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   651  02C4  3002               	movlw	2
   652  02C5  00A5               	movwf	??_lcd_init+2
   653  02C6  3004               	movlw	4
   654  02C7  00A4               	movwf	??_lcd_init+1
   655  02C8  30BA               	movlw	186
   656  02C9  00A3               	movwf	??_lcd_init
   657  02CA                     u647:	
   658  02CA  0BA3               	decfsz	??_lcd_init,f
   659  02CB  2ACA               	goto	u647
   660  02CC  0BA4               	decfsz	??_lcd_init+1,f
   661  02CD  2ACA               	goto	u647
   662  02CE  0BA5               	decfsz	??_lcd_init+2,f
   663  02CF  2ACA               	goto	u647
   664  02D0  0064               	clrwdt
   665                           
   666                           ;main.c: 105: lcd_cmd(0b01000000);
   667  02D1  3040               	movlw	64
   668  02D2  228E               	fcall	_lcd_cmd
   669                           
   670                           ;main.c: 106: _nop();
   671  02D3  0000               	nop
   672                           
   673                           ;main.c: 107: lcd_cmd(0b11000000);
   674  02D4  30C0               	movlw	192
   675  02D5  228E               	fcall	_lcd_cmd
   676                           
   677                           ;main.c: 108: _nop();
   678  02D6  0000               	nop
   679                           
   680                           ;main.c: 109: lcd_clear();
   681  02D7  22A0               	fcall	_lcd_clear
   682                           
   683                           ;main.c: 110: lcd_cmd(0b10001000);
   684  02D8  3088               	movlw	136
   685  02D9  2A8E               	ljmp	_lcd_cmd
   686  02DA                     __end_of_lcd_init:	
   687                           
   688                           	psect	text222
   689  03B4                     __ptext222:	
   690 ;; =============== function _lcd_init ends ============
   691                           
   692                           
   693 ;; *************** function _readData *****************
   694 ;; Defined at:
   695 ;;		line 267 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  irdata          1    wreg     PTR unsigned char 
   698 ;;		 -> getIrData@irdata(5), 
   699 ;;  size            1    2[BANK0 ] unsigned char 
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  irdata          1    3[BANK0 ] PTR unsigned char 
   702 ;;		 -> getIrData@irdata(5), 
   703 ;;  mask            1    6[BANK0 ] unsigned char 
   704 ;;  value           1    5[BANK0 ] unsigned char 
   705 ;;  byte_count      1    4[BANK0 ] unsigned char 
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      unsigned char 
   708 ;; Registers used:
   709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 20/0
   712 ;;		On exit  : 20/0
   713 ;;		Unchanged: FFEDF/0
   714 ;; Data sizes:     COMMON   BANK0
   715 ;;      Params:         0       1
   716 ;;      Locals:         0       4
   717 ;;      Temps:          0       0
   718 ;;      Totals:         0       5
   719 ;;Total ram usage:        5 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; Hardware stack levels required when called:    1
   722 ;; This function calls:
   723 ;;		_readIrSensor
   724 ;; This function is called by:
   725 ;;		_getIrData
   726 ;; This function uses a non-reentrant model
   727 ;;
   728  03B4                     _readData:	
   729                           
   730                           ; Regs used in _readData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   731                           ;readData@irdata stored from wreg
   732  03B4  00A3               	movwf	readData@irdata
   733                           
   734                           ;main.c: 269: count = 0;
   735  03B5  01B8               	clrf	_count	;volatile
   736                           
   737                           ;main.c: 270: unsigned char byte_count = 0;
   738  03B6  01A4               	clrf	readData@byte_count
   739                           
   740                           ;main.c: 271: unsigned char mask = 1;
   741  03B7  01A6               	clrf	readData@mask
   742  03B8  0AA6               	incf	readData@mask,f
   743                           
   744                           ;main.c: 272: value = 0;
   745  03B9  01A5               	clrf	readData@value
   746  03BA                     l407:	
   747                           ;main.c: 273: while(1)
   748                           
   749                           
   750                           ;main.c: 274: {
   751                           ;main.c: 275: count = 0;
   752  03BA  01B8               	clrf	_count	;volatile
   753  03BB                     l1708:	
   754                           ;main.c: 276: while(readIrSensor() == 1)
   755                           
   756  03BB  22DA               	fcall	_readIrSensor
   757  03BC  3A01               	xorlw	1
   758  03BD  1D03               	btfss	3,2
   759  03BE  2BC1               	goto	l1710
   760                           
   761                           ;main.c: 277: count++;
   762  03BF  0AB8               	incf	_count,f	;volatile
   763  03C0  2BBB               	goto	l1708
   764  03C1                     l1710:	
   765                           
   766                           ;main.c: 278: if(count < 10 || count > 14)
   767  03C1  300A               	movlw	10
   768  03C2  0238               	subwf	_count,w	;volatile
   769  03C3  1C03               	skipc
   770  03C4  3403               	retlw	3
   771  03C5  300F               	movlw	15
   772  03C6  0238               	subwf	_count,w	;volatile
   773  03C7  1803               	btfsc	3,0
   774                           
   775                           ;main.c: 279: return 3;
   776  03C8  3403               	retlw	3
   777                           
   778                           ;main.c: 281: count = 0;
   779  03C9  01B8               	clrf	_count	;volatile
   780  03CA                     l1722:	
   781                           ;main.c: 282: while(readIrSensor() == 0)
   782                           
   783  03CA  22DA               	fcall	_readIrSensor
   784  03CB  3A00               	xorlw	0
   785  03CC  1D03               	btfss	3,2
   786  03CD  2BD0               	goto	l1724
   787                           
   788                           ;main.c: 283: count++;
   789  03CE  0AB8               	incf	_count,f	;volatile
   790  03CF  2BCA               	goto	l1722
   791  03D0                     l1724:	
   792                           
   793                           ;main.c: 286: if((count >=10 ) && ( count <=14) )
   794  03D0  300A               	movlw	10
   795  03D1  0238               	subwf	_count,w	;volatile
   796  03D2  1C03               	skipc
   797  03D3  2BDB               	goto	l1730
   798  03D4  300F               	movlw	15
   799  03D5  0238               	subwf	_count,w	;volatile
   800  03D6  1803               	skipnc
   801  03D7  2BDB               	goto	l1730
   802                           
   803                           ;main.c: 287: value &= ~mask;
   804  03D8  0926               	comf	readData@mask,w
   805  03D9  05A5               	andwf	readData@value,f
   806  03DA  2BE1               	goto	l1738
   807  03DB                     l1730:	
   808                           
   809                           ;main.c: 288: else if(count > 33)
   810  03DB  3022               	movlw	34
   811  03DC  0238               	subwf	_count,w	;volatile
   812  03DD  1C03               	skipc
   813  03DE  3404               	retlw	4
   814                           
   815                           ;main.c: 289: value |= mask;
   816  03DF  0826               	movf	readData@mask,w
   817  03E0  04A5               	iorwf	readData@value,f
   818  03E1                     l1738:	
   819                           ;main.c: 290: else
   820                           ;main.c: 291: return 4;
   821                           
   822                           
   823                           ;main.c: 293: if(count > 200 )
   824  03E1  30C9               	movlw	201
   825  03E2  0238               	subwf	_count,w	;volatile
   826  03E3  1C03               	skipc
   827  03E4  2BE9               	goto	l1750
   828                           
   829                           ;main.c: 294: {
   830                           ;main.c: 295: if(mask == 1)
   831  03E5  0B26               	decfsz	readData@mask,w
   832  03E6  3405               	retlw	5
   833                           
   834                           ;main.c: 296: {
   835                           ;main.c: 297: byte_count--;
   836  03E7  03A4               	decf	readData@byte_count,f
   837                           
   838                           ;main.c: 298: break;
   839  03E8  3400               	retlw	0
   840  03E9                     l1750:	
   841                           ;main.c: 300: else
   842                           ;main.c: 301: return 5;
   843                           
   844                           
   845                           ;main.c: 302: }
   846                           ;main.c: 304: if(mask == 0x80)
   847  03E9  0826               	movf	readData@mask,w
   848  03EA  3A80               	xorlw	128
   849  03EB  1D03               	skipz
   850  03EC  2BFC               	goto	l426
   851                           
   852                           ;main.c: 305: {
   853                           ;main.c: 306: mask = 1;
   854  03ED  01A6               	clrf	readData@mask
   855  03EE  0AA6               	incf	readData@mask,f
   856                           
   857                           ;main.c: 307: byte_count++;
   858  03EF  0AA4               	incf	readData@byte_count,f
   859                           
   860                           ;main.c: 308: *irdata = value;
   861  03F0  0823               	movf	readData@irdata,w
   862  03F1  0084               	movwf	4
   863  03F2  0825               	movf	readData@value,w
   864  03F3  1383               	bcf	3,7	;select IRP bank0
   865  03F4  0080               	movwf	0
   866                           
   867                           ;main.c: 309: irdata++;
   868  03F5  0AA3               	incf	readData@irdata,f
   869                           
   870                           ;main.c: 310: value = 0;
   871  03F6  01A5               	clrf	readData@value
   872                           
   873                           ;main.c: 311: if(byte_count > size)
   874  03F7  0824               	movf	readData@byte_count,w
   875  03F8  0222               	subwf	readData@size,w
   876  03F9  1C03               	btfss	3,0
   877  03FA  3400               	retlw	0
   878  03FB  2BBA               	goto	l407
   879  03FC                     l426:	
   880                           
   881                           ;main.c: 314: }
   882                           ;main.c: 316: mask = mask << 1;
   883  03FC  1003               	clrc
   884  03FD  0DA6               	rlf	readData@mask,f
   885  03FE  2BBA               	goto	l407
   886  03FF                     __end_of_readData:	
   887                           ;main.c: 317: }
   888                           ;main.c: 318: return 0;
   889                           
   890                           
   891                           	psect	text223
   892  0346                     __ptext223:	
   893 ;; =============== function _readData ends ============
   894                           
   895                           
   896 ;; *************** function _readMark *****************
   897 ;; Defined at:
   898 ;;		line 237 in file "main.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;		None
   903 ;; Return value:  Size  Location     Type
   904 ;;                  1    wreg      unsigned char 
   905 ;; Registers used:
   906 ;;		wreg, status,2, status,0, pclath, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : 20/0
   909 ;;		On exit  : 20/0
   910 ;;		Unchanged: FFFDF/0
   911 ;; Data sizes:     COMMON   BANK0
   912 ;;      Params:         0       0
   913 ;;      Locals:         0       0
   914 ;;      Temps:          0       0
   915 ;;      Totals:         0       0
   916 ;;Total ram usage:        0 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; Hardware stack levels required when called:    1
   919 ;; This function calls:
   920 ;;		_readIrSensor
   921 ;; This function is called by:
   922 ;;		_getIrData
   923 ;; This function uses a non-reentrant model
   924 ;;
   925  0346                     _readMark:	
   926                           
   927                           ;main.c: 238: GPIO4 = 1;
   928                           
   929                           ; Regs used in _readMark: [wreg+status,2+status,0+pclath+cstack]
   930  0346  1605               	bsf	5,4
   931  0347                     l1668:	
   932                           ;main.c: 239: while(!readIrSensor()){}
   933                           
   934  0347  22DA               	fcall	_readIrSensor
   935  0348  3A00               	xorlw	0
   936  0349  1903               	skipnz
   937  034A  2B47               	goto	l1668
   938                           
   939                           ;main.c: 240: GPIO4 = 0;
   940  034B  1205               	bcf	5,4
   941                           
   942                           ;main.c: 243: count = 0;
   943  034C  01B8               	clrf	_count	;volatile
   944  034D                     l1674:	
   945                           ;main.c: 244: while(readIrSensor() == 1)
   946                           
   947  034D  22DA               	fcall	_readIrSensor
   948  034E  3A01               	xorlw	1
   949  034F  1D03               	btfss	3,2
   950  0350  2B53               	goto	l1676
   951                           
   952                           ;main.c: 245: count++;
   953  0351  0AB8               	incf	_count,f	;volatile
   954  0352  2B4D               	goto	l1674
   955  0353                     l1676:	
   956                           
   957                           ;main.c: 247: if(count < 190 || count > 220)
   958  0353  30BE               	movlw	190
   959  0354  0238               	subwf	_count,w	;volatile
   960  0355  1C03               	skipc
   961  0356  3401               	retlw	1
   962  0357  30DD               	movlw	221
   963  0358  0238               	subwf	_count,w	;volatile
   964  0359  1803               	btfsc	3,0
   965                           
   966                           ;main.c: 248: {
   967                           ;main.c: 250: return 1;
   968  035A  3401               	retlw	1
   969                           
   970                           ;main.c: 251: }
   971                           ;main.c: 253: count = 0;
   972  035B  01B8               	clrf	_count	;volatile
   973  035C                     l1688:	
   974                           ;main.c: 255: while(readIrSensor() == 0)
   975                           
   976  035C  22DA               	fcall	_readIrSensor
   977  035D  3A00               	xorlw	0
   978  035E  1D03               	btfss	3,2
   979  035F  2B62               	goto	l1690
   980                           
   981                           ;main.c: 256: count++;
   982  0360  0AB8               	incf	_count,f	;volatile
   983  0361  2B5C               	goto	l1688
   984  0362                     l1690:	
   985                           
   986                           ;main.c: 258: if(count < 90 || count > 115)
   987  0362  305A               	movlw	90
   988  0363  0238               	subwf	_count,w	;volatile
   989  0364  1C03               	skipc
   990  0365  3402               	retlw	2
   991  0366  3074               	movlw	116
   992  0367  0238               	subwf	_count,w	;volatile
   993  0368  1803               	btfsc	3,0
   994                           
   995                           ;main.c: 259: {
   996                           ;main.c: 261: return 2;
   997  0369  3402               	retlw	2
   998                           
   999                           ;main.c: 262: }
  1000                           ;main.c: 263: return 0;
  1001  036A  3400               	retlw	0
  1002  036B                     __end_of_readMark:	
  1003                           
  1004                           	psect	text224
  1005  02A0                     __ptext224:	
  1006 ;; =============== function _readMark ends ============
  1007                           
  1008                           
  1009 ;; *************** function _lcd_clear *****************
  1010 ;; Defined at:
  1011 ;;		line 89 in file "main.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  count           1    2[BANK0 ] unsigned char 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;		None               void
  1018 ;; Registers used:
  1019 ;;		wreg, status,2, status,0, pclath, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 20/0
  1023 ;;		Unchanged: FFFDF/0
  1024 ;; Data sizes:     COMMON   BANK0
  1025 ;;      Params:         0       0
  1026 ;;      Locals:         0       1
  1027 ;;      Temps:          0       0
  1028 ;;      Totals:         0       1
  1029 ;;Total ram usage:        1 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    1
  1032 ;; This function calls:
  1033 ;;		_lcd_write
  1034 ;; This function is called by:
  1035 ;;		_lcd_init
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038  02A0                     _lcd_clear:	
  1039                           
  1040                           ;main.c: 90: unsigned char count = 14;
  1041                           
  1042                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  1043  02A0  300E               	movlw	14
  1044  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1045  02A2  00A2               	movwf	lcd_clear@count
  1046  02A3  3040               	movlw	64
  1047                           
  1048                           ;main.c: 91: GPIO1 = 0;
  1049  02A4  1085               	bcf	5,1
  1050                           
  1051                           ;main.c: 92: lcd_write(0b01000000);
  1052  02A5  22B1               	fcall	_lcd_write
  1053                           
  1054                           ;main.c: 93: lcd_write(0b11000000);
  1055  02A6  30C0               	movlw	192
  1056  02A7  22B1               	fcall	_lcd_write
  1057  02A8                     l1664:	
  1058                           ;main.c: 94: while(count)
  1059                           
  1060  02A8  08A2               	movf	lcd_clear@count,f
  1061  02A9  1903               	btfsc	3,2
  1062  02AA  2AAF               	goto	l329
  1063                           
  1064                           ;main.c: 95: {
  1065                           ;main.c: 96: lcd_write(0);
  1066  02AB  3000               	movlw	0
  1067  02AC  22B1               	fcall	_lcd_write
  1068                           
  1069                           ;main.c: 97: count--;
  1070  02AD  03A2               	decf	lcd_clear@count,f
  1071  02AE  2AA8               	goto	l1664
  1072  02AF                     l329:	
  1073                           
  1074                           ;main.c: 98: }
  1075                           ;main.c: 99: GPIO1 = 1;
  1076  02AF  1485               	bsf	5,1
  1077  02B0  0008               	return
  1078  02B1                     __end_of_lcd_clear:	
  1079                           
  1080                           	psect	text225
  1081  028E                     __ptext225:	
  1082 ;; =============== function _lcd_clear ends ============
  1083                           
  1084                           
  1085 ;; *************** function _lcd_cmd *****************
  1086 ;; Defined at:
  1087 ;;		line 82 in file "main.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  cmd             1    wreg     unsigned char 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  cmd             1    2[BANK0 ] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;		None               void
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0, pclath, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 20/0
  1099 ;;		Unchanged: FFFDF/0
  1100 ;; Data sizes:     COMMON   BANK0
  1101 ;;      Params:         0       0
  1102 ;;      Locals:         0       1
  1103 ;;      Temps:          0       0
  1104 ;;      Totals:         0       1
  1105 ;;Total ram usage:        1 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    1
  1108 ;; This function calls:
  1109 ;;		_lcd_write
  1110 ;; This function is called by:
  1111 ;;		_lcd_init
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114  028E                     _lcd_cmd:	
  1115                           
  1116                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  1117                           ;lcd_cmd@cmd stored from wreg
  1118  028E  1283               	bcf	3,5	;RP0=0, select bank0
  1119  028F  00A2               	movwf	lcd_cmd@cmd
  1120                           
  1121                           ;main.c: 83: GPIO1 = 0;
  1122  0290  1085               	bcf	5,1
  1123                           
  1124                           ;main.c: 84: lcd_write(cmd);
  1125  0291  22B1               	fcall	_lcd_write
  1126                           
  1127                           ;main.c: 85: GPIO1 = 1;
  1128  0292  1485               	bsf	5,1
  1129  0293  0008               	return
  1130  0294                     __end_of_lcd_cmd:	
  1131                           
  1132                           	psect	text226
  1133  02F1                     __ptext226:	
  1134 ;; =============== function _lcd_cmd ends ============
  1135                           
  1136                           
  1137 ;; *************** function _lcd_puts *****************
  1138 ;; Defined at:
  1139 ;;		line 67 in file "main.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  address         1    wreg     unsigned char 
  1142 ;;  data            1    2[BANK0 ] PTR unsigned char 
  1143 ;;		 -> main@lcd_data(8), 
  1144 ;;  size            1    3[BANK0 ] unsigned char 
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;  address         1    4[BANK0 ] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;		None               void
  1149 ;; Registers used:
  1150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1151 ;; Tracked objects:
  1152 ;;		On entry : 20/0
  1153 ;;		On exit  : 20/0
  1154 ;;		Unchanged: FFEDF/0
  1155 ;; Data sizes:     COMMON   BANK0
  1156 ;;      Params:         0       2
  1157 ;;      Locals:         0       1
  1158 ;;      Temps:          0       0
  1159 ;;      Totals:         0       3
  1160 ;;Total ram usage:        3 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; Hardware stack levels required when called:    1
  1163 ;; This function calls:
  1164 ;;		_lcd_write
  1165 ;; This function is called by:
  1166 ;;		_main
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169  02F1                     _lcd_puts:	
  1170                           
  1171                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1172                           ;lcd_puts@address stored from wreg
  1173  02F1  00A4               	movwf	lcd_puts@address
  1174                           
  1175                           ;main.c: 68: GPIO1 = 0;
  1176  02F2  1085               	bcf	5,1
  1177                           
  1178                           ;main.c: 69: lcd_write(0b11000000|address);
  1179  02F3  38C0               	iorlw	192
  1180  02F4  22B1               	fcall	_lcd_write
  1181                           
  1182                           ;main.c: 70: if(data != (0))
  1183  02F5  0822               	movf	lcd_puts@data,w
  1184  02F6  1903               	btfsc	3,2
  1185  02F7  2B06               	goto	l317
  1186  02F8                     l1644:	
  1187  02F8  03A3               	decf	lcd_puts@size,f
  1188  02F9  0823               	movf	lcd_puts@size,w
  1189  02FA  3AFF               	xorlw	255
  1190  02FB  1903               	btfsc	3,2
  1191  02FC  2B06               	goto	l317
  1192                           
  1193                           ;main.c: 73: {
  1194                           ;main.c: 74: lcd_write(*data++);
  1195  02FD  0822               	movf	lcd_puts@data,w
  1196  02FE  0084               	movwf	4
  1197  02FF  1383               	bcf	3,7	;select IRP bank0
  1198  0300  0800               	movf	0,w
  1199  0301  22B1               	fcall	_lcd_write
  1200  0302  3000               	movlw	0
  1201  0303  0AA2               	incf	lcd_puts@data,f
  1202                           
  1203                           ;main.c: 75: lcd_write(0);
  1204  0304  22B1               	fcall	_lcd_write
  1205  0305  2AF8               	goto	l1644
  1206  0306                     l317:	
  1207                           
  1208                           ;main.c: 76: }
  1209                           ;main.c: 77: }
  1210                           ;main.c: 79: GPIO1 = 1;
  1211  0306  1485               	bsf	5,1
  1212  0307  0008               	return
  1213  0308                     __end_of_lcd_puts:	
  1214                           
  1215                           	psect	text227
  1216  02DA                     __ptext227:	
  1217 ;; =============== function _lcd_puts ends ============
  1218                           
  1219                           
  1220 ;; *************** function _readIrSensor *****************
  1221 ;; Defined at:
  1222 ;;		line 221 in file "main.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;		None
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  port            1    1[BANK0 ] unsigned char 
  1227 ;;  c               1    0[BANK0 ] unsigned char 
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      unsigned char 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2, status,0
  1232 ;; Tracked objects:
  1233 ;;		On entry : 20/0
  1234 ;;		On exit  : 20/0
  1235 ;;		Unchanged: FFFDF/0
  1236 ;; Data sizes:     COMMON   BANK0
  1237 ;;      Params:         0       0
  1238 ;;      Locals:         0       2
  1239 ;;      Temps:          0       0
  1240 ;;      Totals:         0       2
  1241 ;;Total ram usage:        2 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; This function calls:
  1244 ;;		Nothing
  1245 ;; This function is called by:
  1246 ;;		_readMark
  1247 ;;		_readData
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250  02DA                     _readIrSensor:	
  1251                           
  1252                           ;main.c: 222: unsigned char c=2;
  1253                           
  1254                           ; Regs used in _readIrSensor: [wreg+status,2+status,0]
  1255  02DA  3002               	movlw	2
  1256  02DB  00A0               	movwf	readIrSensor@c
  1257                           
  1258                           ;main.c: 223: unsigned char port = GPIO3;
  1259  02DC  3000               	movlw	0
  1260  02DD  1985               	btfsc	5,3
  1261  02DE  3001               	movlw	1
  1262  02DF  00A1               	movwf	readIrSensor@port
  1263  02E0                     l382:	
  1264                           ;main.c: 224: do
  1265                           
  1266                           
  1267                           ;main.c: 225: {
  1268                           ;main.c: 227: if( GPIO3 != port)
  1269  02E0  3000               	movlw	0
  1270  02E1  1985               	btfsc	5,3
  1271  02E2  3001               	movlw	1
  1272  02E3  0621               	xorwf	readIrSensor@port,w
  1273  02E4  1903               	skipnz
  1274  02E5  2AEB               	goto	l1624
  1275                           
  1276                           ;main.c: 228: port = GPIO3;
  1277  02E6  3000               	movlw	0
  1278  02E7  1985               	btfsc	5,3
  1279  02E8  3001               	movlw	1
  1280  02E9  00A1               	movwf	readIrSensor@port
  1281  02EA  2AEC               	goto	l384
  1282  02EB                     l1624:	
  1283                           
  1284                           ;main.c: 229: else
  1285                           ;main.c: 230: c--;
  1286  02EB  03A0               	decf	readIrSensor@c,f
  1287  02EC                     l384:	
  1288                           
  1289                           ;main.c: 231: }
  1290                           ;main.c: 232: while(c);
  1291  02EC  08A0               	movf	readIrSensor@c,f
  1292  02ED  1D03               	skipz
  1293  02EE  2AE0               	goto	l382
  1294                           
  1295                           ;main.c: 233: return port;
  1296  02EF  0821               	movf	readIrSensor@port,w
  1297  02F0  0008               	return
  1298  02F1                     __end_of_readIrSensor:	
  1299                           
  1300                           	psect	text228
  1301  0294                     __ptext228:	
  1302 ;; =============== function _readIrSensor ends ============
  1303                           
  1304                           
  1305 ;; *************** function _configure *****************
  1306 ;; Defined at:
  1307 ;;		line 206 in file "main.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;		None
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;		None
  1312 ;; Return value:  Size  Location     Type
  1313 ;;		None               void
  1314 ;; Registers used:
  1315 ;;		wreg, status,2
  1316 ;; Tracked objects:
  1317 ;;		On entry : 17F/0
  1318 ;;		On exit  : 17F/0
  1319 ;;		Unchanged: FFE80/0
  1320 ;; Data sizes:     COMMON   BANK0
  1321 ;;      Params:         0       0
  1322 ;;      Locals:         0       0
  1323 ;;      Temps:          0       0
  1324 ;;      Totals:         0       0
  1325 ;;Total ram usage:        0 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; This function calls:
  1328 ;;		Nothing
  1329 ;; This function is called by:
  1330 ;;		_main
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333  0294                     _configure:	
  1334                           
  1335                           ;main.c: 209: GPIO = 0;
  1336                           
  1337                           ; Regs used in _configure: [wreg+status,2]
  1338  0294  0185               	clrf	5	;volatile
  1339                           
  1340                           ;main.c: 210: CMCON = 0x07;
  1341  0295  3007               	movlw	7
  1342  0296  0099               	movwf	25	;volatile
  1343                           
  1344                           ;main.c: 211: TRISIO = 0b11001000;
  1345  0297  30C8               	movlw	200
  1346  0298  1683               	bsf	3,5	;RP0=1, select bank1
  1347  0299  0085               	movwf	5	;volatile
  1348                           
  1349                           ;main.c: 214: GPIO1 = 1;
  1350  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1351  029B  1485               	bsf	5,1
  1352                           
  1353                           ;main.c: 215: GPIO0 = 0;
  1354  029C  1005               	bcf	5,0
  1355                           
  1356                           ;main.c: 216: GPIO5 = 1;
  1357  029D  1685               	bsf	5,5
  1358                           
  1359                           ;main.c: 217: GPIO2 = 1;
  1360  029E  1505               	bsf	5,2
  1361  029F  0008               	return
  1362  02A0                     __end_of_configure:	
  1363                           
  1364                           	psect	text229
  1365  0308                     __ptext229:	
  1366 ;; =============== function _configure ends ============
  1367                           
  1368                           
  1369 ;; *************** function _to7hex *****************
  1370 ;; Defined at:
  1371 ;;		line 114 in file "main.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  val             1    wreg     unsigned char 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  val             1    0[BANK0 ] unsigned char 
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      unsigned char 
  1378 ;; Registers used:
  1379 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 20/0
  1382 ;;		On exit  : 20/0
  1383 ;;		Unchanged: FFFDF/0
  1384 ;; Data sizes:     COMMON   BANK0
  1385 ;;      Params:         0       0
  1386 ;;      Locals:         0       1
  1387 ;;      Temps:          0       0
  1388 ;;      Totals:         0       1
  1389 ;;Total ram usage:        1 bytes
  1390 ;; Hardware stack levels used:    1
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397  0308                     _to7hex:	
  1398                           
  1399                           ; Regs used in _to7hex: [wreg-fsr0h+status,2+status,0]
  1400                           ;to7hex@val stored from wreg
  1401  0308  00A0               	movwf	to7hex@val
  1402                           
  1403                           ;main.c: 116: switch(val)
  1404  0309  2B1A               	goto	l1602
  1405  030A                     l1536:	
  1406                           
  1407                           ;main.c: 119: return 0b00111111;
  1408  030A  343F               	retlw	63
  1409  030B                     l1540:	
  1410                           
  1411                           ;main.c: 121: return 0b00000110;
  1412  030B  3406               	retlw	6
  1413  030C                     l1544:	
  1414                           
  1415                           ;main.c: 123: return 0b01011011;
  1416  030C  345B               	retlw	91
  1417  030D                     l1548:	
  1418                           
  1419                           ;main.c: 125: return 0b01001111;
  1420  030D  344F               	retlw	79
  1421  030E                     l1552:	
  1422                           
  1423                           ;main.c: 127: return 0b01100110;
  1424  030E  3466               	retlw	102
  1425  030F                     l1556:	
  1426                           
  1427                           ;main.c: 129: return 0b01101101;
  1428  030F  346D               	retlw	109
  1429  0310                     l1560:	
  1430                           
  1431                           ;main.c: 131: return 0b01111101;
  1432  0310  347D               	retlw	125
  1433  0311                     l1564:	
  1434                           
  1435                           ;main.c: 133: return 0b00000111;
  1436  0311  3407               	retlw	7
  1437  0312                     l1568:	
  1438                           
  1439                           ;main.c: 135: return 0b01111111;
  1440  0312  347F               	retlw	127
  1441  0313                     l1572:	
  1442                           
  1443                           ;main.c: 137: return 0b01101111;
  1444  0313  346F               	retlw	111
  1445  0314                     l1576:	
  1446                           
  1447                           ;main.c: 139: return 0b01110111;
  1448  0314  3477               	retlw	119
  1449  0315                     l1580:	
  1450                           
  1451                           ;main.c: 141: return 0b01111100;
  1452  0315  347C               	retlw	124
  1453  0316                     l1584:	
  1454                           
  1455                           ;main.c: 143: return 0b00111001;
  1456  0316  3439               	retlw	57
  1457  0317                     l1588:	
  1458                           
  1459                           ;main.c: 145: return 0b01011110;
  1460  0317  345E               	retlw	94
  1461  0318                     l1592:	
  1462                           
  1463                           ;main.c: 147: return 0b01111001;
  1464  0318  3479               	retlw	121
  1465  0319                     l1596:	
  1466                           
  1467                           ;main.c: 149: return 0b01110001;
  1468  0319  3471               	retlw	113
  1469  031A                     l1602:	
  1470  031A  0820               	movf	to7hex@val,w
  1471                           
  1472                           ; Switch size 1, requested type "space"
  1473                           ; Number of cases is 16, Range of values is 0 to 15
  1474                           ; switch strategies available:
  1475                           ; Name         Instructions Cycles
  1476                           ; direct_byte           22     6 (fixed)
  1477                           ; simple_byte           49    25 (average)
  1478                           ; jumptable            260     6 (fixed)
  1479                           ; rangetable            20     6 (fixed)
  1480                           ; spacedrange           38     9 (fixed)
  1481                           ; locatedrange          16     3 (fixed)
  1482                           ;	Chosen strategy is direct_byte
  1483  031B  0084               	movwf	4
  1484  031C  3010               	movlw	16
  1485  031D  0204               	subwf	4,w
  1486  031E  1803               	skipnc
  1487  031F  0008               	return
  1488  0320  3000               	movlw	high S1862
  1489  0321  008A               	movwf	10
  1490  0322  3005               	movlw	low S1862
  1491  0323  0704               	addwf	4,w
  1492  0324  0082               	movwf	2
  1493  0325  0008               	return
  1494  0326                     __end_of_to7hex:	
  1495                           
  1496                           	psect	swtext1
  1497  0005                     __pswtext1:	
  1498  0005                     S1862:	
  1499  0005  2B0A               	ljmp	l1536
  1500  0006  2B0B               	ljmp	l1540
  1501  0007  2B0C               	ljmp	l1544
  1502  0008  2B0D               	ljmp	l1548
  1503  0009  2B0E               	ljmp	l1552
  1504  000A  2B0F               	ljmp	l1556
  1505  000B  2B10               	ljmp	l1560
  1506  000C  2B11               	ljmp	l1564
  1507  000D  2B12               	ljmp	l1568
  1508  000E  2B13               	ljmp	l1572
  1509  000F  2B14               	ljmp	l1576
  1510  0010  2B15               	ljmp	l1580
  1511  0011  2B16               	ljmp	l1584
  1512  0012  2B17               	ljmp	l1588
  1513  0013  2B18               	ljmp	l1592
  1514  0014  2B19               	ljmp	l1596
  1515                           
  1516                           	psect	text230
  1517  02B1                     __ptext230:	
  1518 ;; =============== function _to7hex ends ============
  1519                           
  1520                           
  1521 ;; *************** function _lcd_write *****************
  1522 ;; Defined at:
  1523 ;;		line 51 in file "main.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  data            1    wreg     unsigned char 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  data            1    0[BANK0 ] unsigned char 
  1528 ;;  bitCount        1    1[BANK0 ] unsigned char 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;		None               void
  1531 ;; Registers used:
  1532 ;;		wreg, status,2, status,0
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 20/0
  1536 ;;		Unchanged: FFFDF/0
  1537 ;; Data sizes:     COMMON   BANK0
  1538 ;;      Params:         0       0
  1539 ;;      Locals:         0       2
  1540 ;;      Temps:          0       0
  1541 ;;      Totals:         0       2
  1542 ;;Total ram usage:        2 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; This function calls:
  1545 ;;		Nothing
  1546 ;; This function is called by:
  1547 ;;		_lcd_puts
  1548 ;;		_lcd_cmd
  1549 ;;		_lcd_clear
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552  02B1                     _lcd_write:	
  1553                           
  1554                           ; Regs used in _lcd_write: [wreg+status,2+status,0]
  1555                           ;lcd_write@data stored from wreg
  1556  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  1557  02B2  00A0               	movwf	lcd_write@data
  1558                           
  1559                           ;main.c: 52: unsigned char bitCount = 8;
  1560  02B3  3008               	movlw	8
  1561  02B4  00A1               	movwf	lcd_write@bitCount
  1562  02B5                     l309:	
  1563                           ;main.c: 53: while(bitCount)
  1564                           
  1565  02B5  08A1               	movf	lcd_write@bitCount,f
  1566  02B6  1903               	btfsc	3,2
  1567  02B7  0008               	return
  1568                           
  1569                           ;main.c: 54: {
  1570                           ;main.c: 55: if(data & 0x1)
  1571  02B8  1C20               	btfss	lcd_write@data,0
  1572  02B9  2ABC               	goto	l311
  1573                           
  1574                           ;main.c: 56: GPIO0 = 1;
  1575  02BA  1405               	bsf	5,0
  1576  02BB  2ABD               	goto	l312
  1577  02BC                     l311:	
  1578                           
  1579                           ;main.c: 57: else
  1580                           ;main.c: 58: GPIO0 = 0;
  1581  02BC  1005               	bcf	5,0
  1582  02BD                     l312:	
  1583                           
  1584                           ;main.c: 59: ((GPIO5 = 0),(GPIO5=1));
  1585  02BD  1285               	bcf	5,5
  1586  02BE  1685               	bsf	5,5
  1587                           
  1588                           ;main.c: 60: GPIO0 = 0;
  1589  02BF  1005               	bcf	5,0
  1590                           
  1591                           ;main.c: 61: data = data >> 1;
  1592  02C0  1003               	clrc
  1593  02C1  0CA0               	rrf	lcd_write@data,f
  1594                           
  1595                           ;main.c: 62: bitCount--;
  1596  02C2  03A1               	decf	lcd_write@bitCount,f
  1597  02C3  2AB5               	goto	l309
  1598  02C4                     __end_of_lcd_write:	
  1599                           
  1600                           	psect	text231
  1601  0000                     __ptext231:	
  1602 ;; =============== function _lcd_write ends ============
  1603                           
  1604  005E                     btemp	set	94	;btemp
  1605  005E                     wtemp0	set	94


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Jan 07 15:27:49 2014

                    pc 0002                     fsr 0004                    l311 02BC                    l312 02BD  
                  l321 0000                    l314 0000                    l330 0000                    l324 0000  
                  l309 02B5                    l317 0306                    l333 0000                    l407 03BA  
                  l329 02AF                    l426 03FC                    l382 02E0                    l384 02EC  
                  l386 0000                    l379 0000       readIrSensor@port 0021                    u637 0389  
                  u647 02CA                    fsr0 0004                    indf 0000                   S1862 0005  
                 l1602 031A                   l1610 0000                   l1532 0000                   l1540 030B  
                 l1612 0000                   l1620 0000                   l1534 0000                   l1614 0000  
                 l1606 0000                   l1630 0000                   l1710 03C1                   l1702 0000  
                 l1528 0000                   l1560 0310                   l1552 030E                   l1544 030C  
                 l1536 030A                   l1616 0000                   l1608 0000                   l1624 02EB  
                 l1640 0000                   l1632 0000                   l1704 0000                   l1618 0000  
                 l1642 0000                   l1634 0000                   l1650 0000                   l1730 03DB  
                 l1722 03CA                   l1810 0000                   l1580 0315                   l1572 0313  
                 l1564 0311                   l1556 030F                   l1548 030D                   l1644 02F8  
                 l1652 0000                   l1724 03D0                   l1708 03BB                   l1804 0341  
                 l1820 0000                   l1812 0383                   l1646 0000                   l1662 0000  
                 l1654 0000                   l1670 0000                   l1742 0000                   l1750 03E9  
                 l1806 0343                   l1830 0000                   l1822 0000                   l1814 0000  
                 l1592 0318                   l1584 0316                   l1576 0314                   l1568 0312  
                 l1648 0000                   l1664 02A8                   l1656 0000                   l1760 0000  
                 l1840 0000                   l1832 0000                   l1824 036E                   l1816 0000  
                 l1658 0000                   l1690 0362                   l1674 034D                   l1666 0000  
                 l1762 0000                   l1754 0000                   l1738 03E1                   l1770 0000  
                 l1850 0000                   l1842 0000                   l1834 0000                   l1826 0000  
                 l1818 0000                   l1596 0319                   l1588 0317                   l1676 0353  
                 l1668 0347                   l1756 0000                   l1780 0000                   l1772 0000  
                 l1844 0000                   l1828 0000                   l1758 0000                   l1782 0000  
                 l1774 0000                   l1790 0000                   l1846 0000                   l1838 0000  
                 l1688 035C                   l1776 0000                   l1784 0000                   l1848 0000  
                 l1778 0000                   l1786 0000                   _GPIO 0005                   _main 036B  
                 btemp 005E                   start 0000      lcd_write@bitCount 0021         lcd_clear@count 0022  
         main@lcd_data 002F                  ?_main 0020                  _CMCON 0019                  _GPIO0 0028  
                _GPIO1 0029                  _GPIO2 002A                  _GPIO3 002B                  _GPIO4 002C  
                _GPIO5 002D        __end_of_lcd_cmd 0294                  _count 0038                  _error 0039  
         lcd_puts@data 0022           lcd_puts@size 0023                  pclath 000A                  status 0003  
                wtemp0 005E           __end_of_main 03B4          ?_readIrSensor 0020                 ??_main 002C  
               _TRISIO 0085       __end_of_lcd_init 02DA       __end_of_lcd_puts 0308       __end_of_readData 03FF  
     __end_of_readMark 036B                 _to7hex 0308         ??_readIrSensor 0000              ??_lcd_cmd 0000  
        lcd_write@data 0020         __pcstackCOMMON 0000     __size_of_getIrData 0020     __size_of_lcd_clear 0011  
   __size_of_configure 000C     __size_of_lcd_write 0013             __pbssBANK0 0038             __pmaintext 036B  
         readData@mask 0026           readData@size 0022                ?_to7hex 0020         readData@irdata 0023  
            ?_lcd_init 0020              ?_lcd_puts 0022              ?_readData 0022              ?_readMark 0020  
 __end_of_readIrSensor 02F1      __end_of_getIrData 0346      __end_of_lcd_clear 02B1      __end_of_configure 02A0  
    __end_of_lcd_write 02C4        __size_of_to7hex 001E                _lcd_cmd 028E             ??_lcd_init 0023  
           ??_lcd_puts 0000   end_of_initialization 028C             ??_readData 0000             ??_readMark 0000  
           lcd_cmd@cmd 0022        getIrData@irdata 0027         __end_of_to7hex 0326    start_initialization 028A  
__size_of_readIrSensor 0017               ??_to7hex 0000           _readIrSensor 02DA          __pcstackBANK0 0020  
    __size_of_lcd_init 0016          _osccallibrate 03FF      __size_of_lcd_puts 0017      __size_of_readData 004B  
    __size_of_readMark 0025              _getIrData 0326              __ptext220 0326              __ptext221 02C4  
            __ptext230 02B1              __ptext222 03B4              __ptext231 0000              __ptext223 0346  
            __ptext224 02A0              __ptext225 028E              __ptext226 02F1              __ptext227 02DA  
            __ptext228 0294              __ptext229 0308          readData@value 0025              _lcd_clear 02A0  
__p_osccallibrate_text 03FF     readData@byte_count 0024              __pstrings 0000              _configure 0294  
            __pswtext1 0005               ?_lcd_cmd 0020              _lcd_write 02B1  _osccallibrate_absaddr 03FF  
           ?_getIrData 0020             ?_lcd_clear 0020             ?_configure 0020          readIrSensor@c 0020  
           ?_lcd_write 0020              to7hex@val 0020       __size_of_lcd_cmd 0006               _lcd_init 02C4  
             _lcd_puts 02F1               _readData 03B4               _readMark 0346          __size_of_main 0049  
          ??_getIrData 0000        lcd_puts@address 0024               main@data 0037            ??_lcd_clear 0000  
          ??_configure 0000            ??_lcd_write 0000  
